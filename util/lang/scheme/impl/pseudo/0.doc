Package:      lang/scheme/impl/pseudo/

Name:         Pseudo Scheme

Summary:      Scheme implemented on top of Common Lisp.

Version:      2.12 (21-MAY-94)

Description: 

   PseudoScheme is an implementation of Scheme written in Common Lisp.
   It works by running the Scheme code through a preprocessor, which
   generates Common Lisp code. It is well integrated with Common Lisp in
   that Scheme and Common Lisp programs are directly intercallable.
   Scheme programs can be executed using the Common Lisp evaluator or
   compiler because Lisp sees Scheme special forms as macros that invoke
   the translator.  Pseudoscheme does not support first-class
   continuations (CALL/CC isn't as general as in a true Scheme), and
   it has only partial support for tail recursion and the number
   system, but beyond these limitations it scrupulously implements all
   of IEEE (and Revised^4) Scheme.  It also provides an implementation
   of the new "hygienic" high-level macro facility (Clinger and Rees,
   POPL '91). 

Requires:     

Ports:        PseudoScheme runs in Lucid, Symbolics CL, VAX Lisp under
              VMS, and Explorer CL. It should be easy to port to other Lisps.

Origin:       ftp.cs.cornell.edu:/pub/jar/pseudo-2-9.tar.gz
              swiss-ftp.ai.mit.edu:/archive/pseudo/pseudo-2-8.tar.Z
              
Copying:      Copyright (c) 1989-1993 Jonathan Rees
              Use, copying, and distribution permitted. (See file
              named copying.txt for details.)

Updated:      Thu Nov 10 23:09:35 1994

CD-ROM:       Prime Time Freeware for AI, Issue 1-1

Bug Reports:  

Mailing List: Send mail to info-clscheme-request@mc.lcs.mit.edu to be
              put on a mailing list for announcements. 

Author(s):    Jonathan Rees <jar@cs.cornell.edu> or <jar@martigny.ai.mit.edu>

Contact:      

Keywords:     

   Scheme!Implementations, Programming Languages!Scheme, PseudoScheme, 
   Scheme in Common Lisp, R4RS Compatible, Authors!Rees, Interpreters!Scheme,
   Compilers!Scheme

Contains:    ???

See Also:    

References:   

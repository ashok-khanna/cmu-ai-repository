From eeide%asylum.cs.utah.edu@cs.utah.edu Thu Feb 10 16:07:06 EST 1994
Article: 11964 of comp.lang.lisp
Xref: glinda.oz.cs.cmu.edu comp.lang.lisp:11964
Newsgroups: comp.lang.lisp
Path: honeydew.srv.cs.cmu.edu!fs7.ece.cmu.edu!europa.eng.gtefsd.com!howland.reston.ans.net!vixen.cso.uiuc.edu!sdd.hp.com!col.hp.com!csn!hellgate.utah.edu!eeide
From: eeide%asylum.cs.utah.edu@cs.utah.edu (Eric Eide)
Subject: Re: Utah Lisp
Message-ID: <EEIDE.94Feb9134100@asylum.cs.utah.edu>
In-reply-to: JJSTEP00@ukcc.uky.edu's message of Tue, 08 Feb 94 08:25:04 EST
Organization: University of Utah Department of Computer Science
References: <16F577660.JJSTEP00@ukcc.uky.edu>
Date: 9 Feb 94 13:41:00
Lines: 43

Jason Stephenson (JJSTEP00@ukcc.uky.edu) writes:

	Jason> I've come to discover that our mainframe here has an unsupported
	Jason> Lisp interpreter.  It is an implementation of something called
	Jason> Utah Lisp.  I can find nothing in the FAQ about it, and Veronica
	Jason> has been unable to turn anything up on it.  So, I'm asking if
	Jason> there is any one out there who can help point me in the
	Jason> direction of on-line documentation, etc.

Utah Lisp is a dialect of Lisp that was written some years ago here at the
University of Utah.  Utah Lisp was developed a bit before my time, so I'm not
very familiar with it.  More recently, other Lisp systems have been built on
top of Utah Lisp:

    Utah Common Lisp		A CL implementation.
    Utah Scheme			An R3RS (?) Scheme implementation.
    Concurrent Utah Scheme	Utah Scheme plus parallel constructs.
    UCL+P			Utah Common Lisp plus persistence.
    ...

I don't believe that there is any online documentation for Utah Lisp.  As far
as I know, only Concurrent Utah Scheme has much documentation at all.

	Jason> I'd also like to know if it is an implementation of Common Lisp,
	Jason> though I doubt it.

Utah Lisp isn't CL.  Utah Common Lisp is CL, with most of the CLtL2 stuff.

For more information about any of these Utah Lisp systems, contact Professor
Robert Kessler:

	Robert Kessler
	University of Utah Department of Computer Science
	3190 Merrill Engineering Building
	Salt Lake City, Utah  84112
	Email: kessler@cs.uath.edu

Eric.

--
-------------------------------------------------------------------------------
Eric Eide          |          University of Utah Department of Computer Science
eeide@cs.utah.edu  | Buddhist to hot dog vendor: "Make me one with everything."


Article 11965 of comp.lang.lisp:
Xref: glinda.oz.cs.cmu.edu comp.lang.lisp:11965
Path: honeydew.srv.cs.cmu.edu!bb3.andrew.cmu.edu!news.sei.cmu.edu!cis.ohio-state.edu!math.ohio-state.edu!magnus.acs.ohio-state.edu!usenet.ins.cwru.edu!news.ecn.bgu.edu!anaxagoras.ils.nwu.edu!lynch.ils.nwu.edu!user
From: lynch@ils.nwu.edu (Richard Lynch)
Newsgroups: comp.lang.lisp
Subject: Re: Utah Lisp
Followup-To: comp.lang.lisp
Date: 9 Feb 1994 22:16:48 GMT
Organization: ILS
Lines: 32
Message-ID: <lynch-090294163633@lynch.ils.nwu.edu>
References: <16F577660.JJSTEP00@ukcc.uky.edu>
NNTP-Posting-Host: lynch.ils.nwu.edu

In article <16F577660.JJSTEP00@ukcc.uky.edu>, JJSTEP00@ukcc.uky.edu wrote:

| Hi Folks,
|   I've come to discover that our mainframe here has an unsupported Lisp
| interpreter.  It is an implementation of something called Utah Lisp.  I
can
| find nothing in the FAQ about it, and Veronica has been unable to turn
any-
| thing up on it.  So, I'm asking if there is any one out there who can
help
| point me in the direction of on-line documentation, etc.  I'd also like
to
| know if it is an implementation of Common Lisp, though I doubt it.

I am reminded of my college professor who found a Lisp interpreter on a
tape for the accounting mainframe at Notre Dame [God (and Notre Dame) knows
why the accounting dept had this tape].  He snagged it and that's how we
got into Lisp.  Anyway, the docs I still have from it contain the following
information on their fronts-pieces, though the odds are slim that these
match the particular Utah Lisp you have:

Standard Lisp Report, J.B. Marti, A.C. Hearn, M.L. Griss, C. Griss
University of Utah, UUCS-78-101

Manual for Standard Lisp on IBM System 360 and 370 by John Fitch,
University of Utah, University of Utah Symbolic Computation Group,
Technical Report No. TB-6.

-- 
-- 
--
-- "TANSTAAFL"  Rich lynch@ils.nwu.edu


Article 11974 of comp.lang.lisp:
Xref: glinda.oz.cs.cmu.edu comp.lang.lisp:11974
Newsgroups: comp.lang.lisp
Path: honeydew.srv.cs.cmu.edu!nntp.club.cc.cmu.edu!news.sei.cmu.edu!cis.ohio-state.edu!magnus.acs.ohio-state.edu!math.ohio-state.edu!howland.reston.ans.net!cs.utexas.edu!utnut!utcsri!newsflash.concordia.ca!sifon!eliot
From: eliot@cc.mcgill.ca (E. Handelman)
Subject: Re: Utah Lisp
Message-ID: <1994Feb10.204500.19743@sifon.cc.mcgill.ca>
Sender: news@sifon.cc.mcgill.ca
Organization: The Bland Corporation
References: <16F577660.JJSTEP00@ukcc.uky.edu>
Date: Thu, 10 Feb 1994 20:45:00 GMT
Lines: 21

JJSTEP00@ukcc.uky.edu wrote:
;Hi Folks,
;  I've come to discover that our mainframe here has an unsupported Lisp
;interpreter.  It is an implementation of something called Utah Lisp.  I can
;find nothing in the FAQ about it, and Veronica has been unable to turn any-
;thing up on it.  So, I'm asking if there is any one out there who can help
;point me in the direction of on-line documentation, etc.  I'd also like to
;know if it is an implementation of Common Lisp, though I doubt it.

Utah is a really old and obsolete mainframe lisp. I seem to remember the 
defun syntax being something like scheme (or maclisp?), except 
that you had to quote it (no fexprs or macros, I guess) 
sort of like this (" was the quote character):

(define "(foo (lambda () (baz))))

I couldn't get anything to be accepted by the interpreter, even the 
examples in the manual, which might still be available through 
Concordia U in montreal.
-- 
Best email bet: eliot@phoenix.princeton.EDU


Article 11982 of comp.lang.lisp:
Xref: glinda.oz.cs.cmu.edu comp.lang.lisp:11982
Path: honeydew.srv.cs.cmu.edu!fs7.ece.cmu.edu!europa.eng.gtefsd.com!howland.reston.ans.net!usc!elroy.jpl.nasa.gov!decwrl!concert!rutgers!ukma!ukcc.uky.edu!JJSTEP00
From: JJSTEP00@ukcc.uky.edu
Newsgroups: comp.lang.lisp
Subject: Utah Lisp
Keywords: lisp, standard, obsolete, utah
Message-ID: <16F5A14F40.JJSTEP00@ukcc.uky.edu>
Date: 12 Feb 94 04:50:24 GMT
Organization: The University of Kentucky
Lines: 23
NNTP-Posting-Host: ukcc.uky.edu
X-Newsreader: NNR/VM S_1.3.2

First, I'd like to thank everyone who replied to my query concerning Utah
Lisp.  As promised, here are the results of the query:
 
Utah Lisp is a very old (the manuals are dated 1978, thank you R. Lynch),
mainframe version of a Standard Lisp.  It would be fairly rare for someone
to run across it today, so it probably does not bear mention in the FAQ.
(I stumbled across it on our mainframe here at UKCC quite by accident.)
According to John Fitch, one of its developers, there were several versions:
IBM 360/370, DEC 10, Univac, and Burroughs among others.  From what I have
gleaned, it was an update or an improved version of something begun at
Stanford and completed at Utah, hence the name Utah Lisp.  (This also helps
to explain why the documentation here is for "Lisp/360" and was published
by the SCIP at Stanford.--Perhaps our docs are even more out of date than
our Lisp :-)
 
Once again, thanks to all who helped, and I don't think I'll be using this
for development, though it might be neat to see if I can make the system
crash :-)
 
+---------------------------------+
|     Jason Stephenson            |
|   jjstep00@ukcc.uky.edu         |
+---------------------------------+


Article 12006 of comp.lang.lisp:
Xref: glinda.oz.cs.cmu.edu comp.lang.lisp:12006
Newsgroups: comp.lang.lisp
Path: honeydew.srv.cs.cmu.edu!bb3.andrew.cmu.edu!news.sei.cmu.edu!cis.ohio-state.edu!math.ohio-state.edu!howland.reston.ans.net!europa.eng.gtefsd.com!library.ucla.edu!csulb.edu!csus.edu!netcom.com!alderson
From: alderson@netcom.com (Richard M. Alderson III)
Subject: Re: Utah Lisp
Message-ID: <aldersonCLAJy8.2uz@netcom.com>
Keywords: lisp, standard, obsolete, utah
Organization: Netcom Online Communications Services (408-241-9760 login: guest)
References: <16F5A14F40.JJSTEP00@ukcc.uky.edu>
Date: Wed, 16 Feb 1994 00:27:42 GMT
Lines: 39

I was under the impression that Utah Lisp was a version of Lisp/360.

In article <16F5A14F40.JJSTEP00@ukcc.uky.edu> JJSTEP00@ukcc.uky.edu writes:

>Utah Lisp is a very old (the manuals are dated 1978, thank you R. Lynch),
>mainframe version of a Standard Lisp.  It would be fairly rare for someone
>to run across it today, so it probably does not bear mention in the FAQ.
>(I stumbled across it on our mainframe here at UKCC quite by accident.)

I'm sorry.  I don't think that this is right.

>According to John Fitch, one of its developers, there were several versions:
>IBM 360/370, DEC 10, Univac, and Burroughs among others.  From what I have
>gleaned, it was an update or an improved version of something begun at
>Stanford and completed at Utah, hence the name Utah Lisp.  (This also helps
>to explain why the documentation here is for "Lisp/360" and was published
>by the SCIP at Stanford.--Perhaps our docs are even more out of date than
>our Lisp :-)

If Utah Lisp was Lisp/360 (as I thought when this came up, but I kept waiting
for someone else to answer), then it was *not* Standard Lisp.

I used Lisp/360 at the University of Chicago about 15 years ago.  It's an
EVALQUOTE Lisp, pretty much a Lisp 1.5.  

I also used Standard Lisp, because we were installing the REDUCE2 package on
our academic DEC-20.  This was an EVAL Lisp.

Somewhere in the files I still have the _Standard Lisp Report_ from the Utah
folks; I'll see if I can dig it up and see what the bibliography says about its
predecessors.

I'll also ask over on alt.folklore.computers, to see if anyone over there
remembers more than I.
-- 
Rich Alderson   You know the sort of thing that you can find in any dictionary
                of a strange language, and which so excites the amateur philo-
                logists, itching to derive one tongue from another that they
                know better: a word that is nearly the same in form and meaning
                as the corresponding word in English, or Latin, or Hebrew, or
                what not.
                                                --J. R. R. Tolkien,
alderson@netcom.com                               _The Notion Club Papers_


Article 12030 of comp.lang.lisp:
Xref: glinda.oz.cs.cmu.edu comp.lang.lisp:12030
Newsgroups: comp.lang.lisp
Path: honeydew.srv.cs.cmu.edu!nntp.club.cc.cmu.edu!godot.cc.duq.edu!toads.pgh.pa.us!news.sei.cmu.edu!cis.ohio-state.edu!magnus.acs.ohio-state.edu!math.ohio-state.edu!howland.reston.ans.net!pipex!uknet!gdt!masjpf
From: masjpf@midge.bath.ac.uk (J P Fitch)
Subject: Re: Utah Lisp
Message-ID: <CLFDqL.Fvs@midge.bath.ac.uk>
Keywords: lisp, standard, obsolete, utah
Organization: School of Mathematical Sciences, University of Bath, UK
References: <16F5A14F40.JJSTEP00@ukcc.uky.edu> <aldersonCLAJy8.2uz@netcom.com>
Date: Fri, 18 Feb 1994 15:01:31 GMT
Lines: 13


There was an EVALQUOTE lisp called Lisp/360 which was used at Utah in the
1970s; it came from Stanford and had been heavily modified by Kevin Kay.

Dispite what Richard Anderson says, there was a Standard LISP for IBM 360
based on the same code, and renamed SLISP/360.  It was an EVAL system.
The reason I know is because I did some of the modifications after Kevin
left Utah.  I used it sebsequnetly at Leeds, and in my archives I still
have the source.  Also 2 Japanese, Kanada-san and a student I think, 
transcribed this SLISP/360 into Motorola 68K assembler, and got it to
run!
  It had a number of terrible features, but it did support REDUCE.
==John


Article 12114 of comp.lang.lisp:
Xref: glinda.oz.cs.cmu.edu comp.lang.lisp:12114
Newsgroups: comp.lang.lisp
Path: honeydew.srv.cs.cmu.edu!rochester!udel!MathWorks.Com!europa.eng.gtefsd.com!library.ucla.edu!csulb.edu!csus.edu!netcom.com!alderson
From: alderson@netcom.com (Richard M. Alderson III)
Subject: Re: Utah Lisp
Message-ID: <aldersonCLqxpL.G6y@netcom.com>
Keywords: lisp, standard, obsolete, utah
Organization: Netcom Online Communications Services (408-241-9760 login: guest)
References: <16F5A14F40.JJSTEP00@ukcc.uky.edu> <aldersonCLAJy8.2uz@netcom.com> <CLFDqL.Fvs@midge.bath.ac.uk>
Date: Thu, 24 Feb 1994 20:46:32 GMT
Lines: 32

In article <CLFDqL.Fvs@midge.bath.ac.uk> masjpf@midge.bath.ac.uk (J P Fitch) writes:
>
>There was an EVALQUOTE lisp called Lisp/360 which was used at Utah in the
>1970s; it came from Stanford and had been heavily modified by Kevin Kay.

As it happens, I was re-packing files over the weekend and ran across the
manual for Stanford LISP/360 and the addendum for the Utah modifications over
the weekend, as well as the Standard Lisp docs.

>Dispite what Richard Anderson says, there was a Standard LISP for IBM 360
		       ^

It's an "L".

>based on the same code, and renamed SLISP/360.  It was an EVAL system.
>The reason I know is because I did some of the modifications after Kevin
>left Utah.  I used it sebsequnetly at Leeds, and in my archives I still
>have the source.  Also 2 Japanese, Kanada-san and a student I think, 
>transcribed this SLISP/360 into Motorola 68K assembler, and got it to
>run!
>  It had a number of terrible features, but it did support REDUCE.

We only put up REDUCE on the DEC-20 at Chicago; a competing system called
SPEAKEZ ran on the Amdahl 470.  Thus, we never ran Standard Lisp on the latter.

I suspect, though, to get back to the original poster's question, that the LISP
he found was not Standard Lisp but the predecessor.
-- 
Rich Alderson   You know the sort of thing that you can find in any dictionary
                of a strange language, and which so excites the amateur philo-
                logists, itching to derive one tongue from another that they
                know better: a word that is nearly the same in form and meaning
                as the corresponding word in English, or Latin, or Hebrew, or
                what not.
                                                --J. R. R. Tolkien,
alderson@netcom.com                               _The Notion Club Papers_



{\rtf1\mac\deff2 {\fonttbl{\f0\fswiss Chicago;}{\f2\froman New York;}{\f3\fswiss Geneva;}{\f4\fmodern Monaco;}{\f13\fnil Zapf Dingbats;}{\f16\fnil Palatino;}{\f20\froman Times;}{\f21\fswiss Helvetica;}{\f22\fmodern Courier;}{\f23\ftech Symbol;}
{\f2017\fnil Lubalin Graph;}{\f2052\fnil Zeal;}{\f4950\fnil TTYFont;}{\f12899\fnil AppleGaramond LtIt;}{\f12900\fnil AppleGaramond BkIt;}{\f12901\fnil AppleGaramond BdIt;}{\f12902\fnil AppleGaramond Lt;}{\f12903\fnil AppleGaramond Bk;}
{\f12904\fnil AppleGaramond Bd;}{\f13101\fnil Tekton Oblique;}{\f13102\fnil Tekton;}{\f14819\fnil BI LucidaSans BoldItalic;}{\f14820\fnil B LucidaSans Bold;}{\f14821\fnil I LucidaSans Italic;}{\f14822\fnil LucidaSans Roman;}
{\f14917\fnil BI Letter Gothic BoldSlanted;}{\f14918\fnil B Letter Gothic Bold;}{\f14919\fnil I Letter Gothic Slanted;}{\f14920\fnil Letter Gothic;}{\f32525\fnil VT100;}}{\colortbl\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;
\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;}{\stylesheet{\f21 \sbasedon222\snext0 Normal;}}\margb720\widowctrl\ftnbj\ftnrestart\fracwidth \sectd \linemod0\linex0\cols1 {\footer 
\pard\plain \tqc\tx4320\tqr\tx8640 \f21 {\f12903 \tab \tab }{\f12903 \chpgn }{\f12903 \par 
}}\pard\plain \qc \f21 {\b\f16\fs36 Dylan\'aa FAQ\par 
}{\b\f16\fs28 \'f0 Apple Computer - June 2, 1994\par 
}\pard {\f16 \par 
This memo answers questions which are frequently asked about the Dylan programming language, and its implementations.\par 
\par 
The latest version of this memo is available by anonymous ftp from cambridge.apple.com in the file }{\f22 /pub/dylan/dylan-faq.txt }{\f16 (plain ASCII), or in the file }{\f22 /pub/dylan/dylan-faq.rtf }{\f16 
(formatted, using RTF, which can be read by Microsoft Word, MacWrite, and many other word processors). Other Dylan documents are available for ftp from the same directory.\par 
\par 
This FAQ was substantially revised on June 2, 1994.\par 
\par 
If you want to keep up with Dylan news, consider joining the info-dylan mailing list or the comp.lang.dylan newsgroup, described below.\par 
\par 
\par 
}{\b\f16 General Questions About Dylan}{\f16 \par 
\par 
}{\b\f16 What is Dylan?\par 
}{\f16 \par 
Dylan is a new Object Oriented Dynamic Language (OODL).  Dylan combines the features of static and dynamic languages.  The goal of the language is to support a high level of programmer productivity, while
 still allowing the efficient delivery of applications and libraries.\par 
\par 
Dylan is consistently object-oriented.  It is not a procedural language with an object-oriented extension.  To this end, Dylan does not attempt to be compatible with any previously existing programming language.\par 
\par 
}{\b\f16 What is the target audience for Dylan?\par 
}{\f16 \par 
The target audience for Dylan is developers of commercial application software, most of whom are currently using static languages such as C and C++. 
  We expect Dylan will appeal to many other groups of programmers as well, such as educational users who want a very clean object-oriented language design, or in-house developers who need a high-level, very productive language.\par 
\par 
}{\b\f16 How does Dylan differ from previous OODLs?\par 
}{\f16 \par 
Dylan is designed to allow the powerful and flexible programming techniques and development environments associated with OODLs, while also allowing the small, fast delivered applications currently associated with static languages.\par 
\par 
Unlike many dynamic languages, Dylan\rquote s design consciously enables the runtime environment to execute without the development environment present. In addition, Dylan will let you selectively \lquote turn-off\rquote 
 dynamic capabilities when they are no longer needed, allowing more efficient compilation.\par 
\par 
}{\b\f16 Where can I get a copy of the language specification?\par 
\par 
}{\f16 The first book on the Dylan language was published in 1992.  Since then, the language has undergone a great deal of change in response to feedback from potential users and implementors.  Throughout this process, changes to 
the language design have been published electronically in the form of design notes.  The current round of language design is now essentially complete except for the macro system.\par 
\par 
A new Dylan language reference will be published in early 1995.  This will be the definitive specification of the Dylan language.  Apple is working closely with other Dylan implementors to ensure that this book is not Apple-specif
ic, but rather, applies equally to all Dylan implementations.\par 
\par 
Of course, we realize that many people want to read about Dylan now!  So to fill the gap until the new book is published, we\rquote ll make an interim Dylan reference book available in the first week of June, 1994.  At that time, you\rquote ll be able to
 get a copy of the interim book by anonymous ftp, in the file }{\f22 /pub/dylan/interim-book.rtf}{\f16   The interim book is a combination of the original Dylan book, the  previously published design notes, and additional previously unpublished de
sign decisions.  The document is called \ldblquote interim\rdblquote  not because the language design is unfinished, but because this is a very rough document intended for use until the new book is ready.\par 
\par 
}{\b\f16 Are there any public mailing lists for discussing Dylan?\par 
}{\f16 \par 
Yes.\par 
\par 
The }{\f22 info-dylan}{\f16  mailing list is a forum for discussing all subjects related to Dylan.  Each day\rquote s messages are gathered into a digest and sent as a single compound message to the list }{\f22 info-dylan-digest}{\f16 .  The
 mailing list is also linked to the Newsgroup }{\f22 comp.lang.dylan}{\f16 .\par 
\par 
The }{\f22 announce-dylan}{\f16  mailing list is a moderated list, for major announcements about Dylan (such as the availability of new implementations of the language).  All messages sent to }{\f22 announce-dylan}{\f16  are also sent to }{\f22 info-dylan
}{\f16 .\par 
\par 
To subscribe to info-dylan or announce-dylan, send mail to }{\f22 majordomo@cambridge.apple.com.}{\f16   The body of the message should be \line \ldblquote }{\f22 subscribe }{\i\f22 <list-name>}{\f16 \ldblquote , where }{\i\f16 <list-name>}{\f16 
 is the name of the mailing list you want to subscribe to.  To unsubscribe to one of the mailing lists, send majordomo a message with the body \ldblquote }{\f22 unsubscribe }{\i\f22 <list-name>}{\f16 \ldblquote .  If you would like to subscribe or 
unsubscribe an address which is different from the return address of the message, include the address after the }{\i\f16 <list-name>}{\f16 .  For complete majordomo instructions, send a message with the body \ldblquote help\rdblquote .\par 
\par 
The name of the digest form of }{\f22 info-dylan}{\f16  is }{\f22 info-dylan-digest}{\f16 .\par 
\par 
}\pard \ri360 {\f16 Please do not send administrative requests to the mailing lists!  If you have trouble with info-dylan, send mail to }{\f22 sysadmin@cambridge.apple.com.}{\f16 \par 
}\pard {\f16 \par 
}{\b\f16 Where else can I get information about Dylan?\par 
\par 
}{\f16 The Gwydion Project at Carnegie Mellon University is maintaining a WorldWide Web (WWW) page of general information on Dylan.  This is accessible using Mosaic or other web-browsing software.  This page contains the original Dylan book in on-line
 form, annotated with links to the design notes and changes that have been approved.  This will be replaced by the interim book shortly after it is released to the public.  This web page also contains the current FAQ from Appl
e and other general information of interest to the Dylan community.\par 
\par 
The URL is \ldblquote }{\f22 http://legend.gwydion.cs.cmu.edu:8001/dylan/}{\f16 \rdblquote .\par 
\par 
The Gwydion Project also intends to maintain an FTP-accessible on-line repository of Dylan libraries and code that the authors wish to share with the rest of the community.  When this is in operation, it will be announced on the Dylan mailing lists
 and will be pointed to from the Dylan WWW page mentioned above.\par 
\par 
}{\b\f16 Where should I send comments on the Dylan language?\par 
\par 
}{\f16 Most comments can be sent to }{\f22 info-dylan}{\f16 .  If you wish to send a private letter to the Apple engineers working on dylan, you can send a message to }{\f22 dylan-comments@cambridge.apple.com}{\f16 .  (AppleLink users should send mail to 
}{\f22 DYLAN}{\f16 ).\par 
\par 
}{\b\f16 What should I do if I want to implement Dylan?\par 
}{\f16 \par 
Send mail to }{\f22 dylan-comments@cambridge.apple.com}{\f16 .  We have put together a program to support implementors, and we want to hear from you.  (AppleLink users should send mail to }{\f22 DYLAN}{\f16 ).\par 
\par 
If you\rquote ve written an implementation of Dylan and want to release it, please contact us for a trademark license.\par 
\par 
}{\b\f16 Does Apple have an implementation of Dylan?\par 
}{\f16 \par 
Apple recently announced plans to release an implementation of Dylan.\par 
\par 
The following description of Apple\rquote s implementation was taken from a data sheet distributed by Apple.\par 
\par 
}\pard \li720 {\f16 The Apple Dylan development environment is designed to let you create complex, commercial-quality projects with all the advantages of a rapid-prototyping environment. \par 
\par 
Your project is stored in a database, unlike traditional, file-based systems. Apple Dylan's customizable browsers will give you a powerful new way to look at and manipulate your application as it executes.  You can browse class 
hierarchies graphically, find all references to a given routine or variable, and inspect objects in your program while it's running.\par 
\par 
With Apple Dylan's incremental compiler, you will be able to actually change code in a running program and see the results right away.  No more waiting for a long edit, compile, link, execute, debug cycle.  This gives you freedom 
as a programmer to explore various options and rapidly improve your product.\par 
\par 
Apple Dylan will include:\par 
}\pard \fi-360\li1080 {\f16 o\tab Dylan compiler and runtime\par 
o\tab Integrated development environment featuring incremental development and advanced configurable browsing and viewing of code\par 
o \tab Dylan application framework\par 
o\tab Dylan user-interface design and prototyping tool\par 
o\tab Cross-language support allowing seamless access to existing C and C++ code and APIs}\par 
\pard {\f16 \par 
The first release of Apple Dylan is scheduled to ship in the first quarter of 1995.  This release will support native 68K stand alone applications.\par 
\par 
Six to nine months after the first release, Apple will release a version of Dylan which supports native PowerPC code and OpenDoc parts (components).\par 
\par 
}{\b\f16 How can I get an early copy of Apple\rquote s Dylan implementation?\par 
\par 
}{\f16 Send a message to the AppleLink address }{\f22 DYLAN}{\f16 , or the Internet address }{\f22 dylan@applelink.apple.com}{\f16 .  The message should include your name, address, phone number, 
and a brief description of how you plan on using Apple Dylan.\par 
\par 
}{\b\f16 Are there third-party implementations of Dylan available?\par 
}{\f16 \par 
Several third-parties have expressed interest in implementing Dylan.\par 
\emdash \par 
One experimental implementation has been released and is being supported.  This implementation is called Marlais, and it was created by Brent Benson.\par 
Marlais 0.3 is available in the Dylan ftp directory at }{\f22 cambridge.apple.com}{\f16 .\par 
\emdash \par 
Harlequin is currently investing in a commercial implementation of Dylan. They are building a PC based Windows (NT/Chicago) hosted version of the language.}\par 
\emdash {\f16 \par 
The Gwydion Project at Carnegie Mellon University is building an innovative new software development and maintenance environment around the Dylan language.  A part of this work will involve the development of a high-performance Dylan implementation 
that will produce code for many platforms.\par 
\par 
For more information on this project, see the Gwydion project's WorldWide Web\par 
page: \ldblquote }{\f22 http://legend.gwydion.cs.cmu.edu:8001/gwydion/}{\f16 \rdblquote .\par 
\par 
As a development tool, the Gwydion project has produced a byte-coded Dylan implementation called "Mindy".  Though it is not very fast, does not have an extensive environment, and time spent on maintaining it will be limited, Mindy may be of some v
alue to people who want to play with Dylan code and get a feel for the language.  It will be released soon for general use. The release will be announced on the Dylan mailing lists, and the latest information on Mindy will be available in 
the Gwydion web page.\par 
\par 
}{\b\f16 Is Dylan related to the Newton PDA?}{\f16 \par 
\par 
Not at this time. If you are looking for more information on Newton development, you need to contact the Newton Developer Relations at }{\f22 NEWTON.DEVS@applelink.apple.com}{\f16 .\par 
\par 
}{\b\f16 Is Dylan designed to be a replacement for Common Lisp?\par 
\par 
}{\f16 No.  We see Common Lisp and Dylan filling two distinct needs.\par 
\par 
}{\b\f16 Is Dylan a proprietary language?  Why is the Dylan name trademarked?\par 
}{\f16 \par 
We want Dylan to be available on as many computers as possible.  To this end, we are encouraging groups outside Apple to implement Dylan.\par 
\par 
It is our intention to license the Dylan trademark to any implementation which passes a standard test suite.  The purpose of the trademark is to ensure quality and consistency among implementations.\par 
\par 
}{\b\f16 Is the Dylan language design frozen?\par 
}{\f16 \par 
With the exception of the macro system, the current language design is complete.  At this time, we will only be making small tweaks, or changes necessary to resolve bugs or inconsistencies in the specification.\par 
\par 
}{\b\f16 Is there a group which promotes the use of object-oriented dynamic languages?\par 
}{\f16 \par 
Yes.  There is an OODL special interest group of the Software Frameworks Association (formerly called MADA).  SFA is a group which champions object-oriented programming on the Macintosh as well as other platforms.\par 
\par 
To subscribe to the OODL sig mailing list from AppleLink send mail to }{\f22 OODL.SIG}{\f16 . Internet subscriptions should be requested from }{\f22 oodl-sig-request@cambridge.apple.com}{\f16 .\par 
\par 
\par 
}{\b\f16\fs28 Questions about the Dylan Language Design\par 
}{\f16 \par 
}{\b\f16 \par 
What does the Dylan syntax look like?\par 
}{\f16 \par 
The first Dylan book used a parenthesized, lisp-like syntax.  The current version uses an Algol-like syntax, which will be very familiar to users of Pascal or C.}\par 
\par 
{\b\f16 Will Dylan have a standard macro system with the algebraic syntax?\par 
}{\f16 Yes.\par 
\par 
}{\b\f16 Are there plans to specify a standard I/O package for Dylan?  What about threads?\par 
\par 
}{\f16 Threads, I/O, and other language features may be provided as optional libraries in the future.  They are not currently part of the language.\par 
\par 
Because of the great variety of computing platforms\emdash from PDA to mainframe\emdash we do not want to standardize on these features too strictly.}{\b\f16 \par 
}{\f16 \par 
}{\b\f16 Why is }{\b\f22 make}{\b\f16  allowed to return a previously allocated instance, or an object which is an indirect instance of the class passed to make?\par 
}{\f16 \par 
We feel that this is a very important abstraction mechanism.  A class should have flexibility in how it implements make, as long as the object returned fulfills the protocol of the class.\par 
\par 

For example, this allows a library to document a single abstract class which is supported by several undocumented implementation classes. The abstract class can choose which implementation class to instantiate based on the additional arguments to make.  Th
is allows optimizations which are transparent to the clients of the library.\par 
\par 
The default method for make of a user-defined class returns a fresh direct instance of the requested class.\par 
\par 
}{\b\f16 The Dylan manual doesn\rquote t require implementations to optimize tail-recursion  Was this an intentional omission, or an editorial oversight?\par 
}{\f16 \par 
It was an editorial oversight.  Dylan implementations will be required to be properly tail recursive.\par 
\par 
}{\b\f16 The Dylan manual doesn\rquote t say much about modules.  Will this be specified in the future?\par 
}{\f16 \par 
The new language document includes a complete module specification.\par 
\par 
}{\b\f16 Can the \lquote method\rquote  special form be used to create closures?\par 
}{\f16 \par 
Yes.\par 
\par 
}{\b\f16 I don\rquote t understand how setter variables work.  Is setter a special form?\par 
}{\f16 \par 
This has been clarified in the new language design.  The new design is included in the interim Dylan reference book.\par 
\par 
}{\b\f16 What kind of object is used to return multiple values?\par 
}{\f16 \par 
When a function returns multiple values, the return values are not stored in a wrapper object;  they are returned directly.  For example, if a function returns \ldblquote the values 4 and 5\rdblquote 
, it returns two integers.  It does not return a data structure which contains two integers.\par 
\par 
Returning multiple values is similar to calling a function with more than one argument.  When passing multiple objects as arguments to a function, the objects do not have to be stored in a single data structure before they are passed.\par 
\par 
}{\b\f16 Is the specification of sealing complete?\par 
}{\f16 \par 
Yes.  The new language design includes a complete specification of sealing.  This design will be included in the interim Dylan reference book.\par 
\par 
}{\b\f16 Will Dylan include }{\b\f22 eval}{\b\f16 ?\par 
}{\f16 \par 
Some implementations may choose to support eval, but we do not have plans to add it to the language standard.  We feel that the delivery of applications which are space efficient requires the separation of development time activity from runtime activity.
\par 
\par 
}{\b\f16 Will Dylan include an application framework?\par 
}{\f16 \par 

We recognize the value of application frameworks, especially cross-platform application frameworks.  Unfortunately, because of the great variation in computing platforms, a single application framework will not be part of the Dylan language.  On each platf
orm, there should either be a Dylan-specific application framework, or Dylan should be able to use application frameworks written in other languages.\par 
\par 
}{\b\f16 Will Dylan interface to other languages?\par 
}{\f16 \par 
We recognize that seamless integration with other languages, especially C and C++, is essential.  We are working on addressing this issue.  The solutions may not be part of the Dylan language proper.}\par 
}
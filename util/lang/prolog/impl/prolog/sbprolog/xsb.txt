From honeydew.srv.cs.cmu.edu!magnesium.club.cc.cmu.edu!eddie.mit.edu!news.kei.com!sol.ctr.columbia.edu!howland.reston.ans.net!darwin.sura.net!udel!newsserv.cs.sunysb.edu!warren Thu Aug 26 12:20:19 EDT 1993
Article: 8427 of comp.lang.prolog
Xref: honeydew.srv.cs.cmu.edu comp.lang.prolog:8427
Path: honeydew.srv.cs.cmu.edu!magnesium.club.cc.cmu.edu!eddie.mit.edu!news.kei.com!sol.ctr.columbia.edu!howland.reston.ans.net!darwin.sura.net!udel!newsserv.cs.sunysb.edu!warren
From: warren@cs.sunysb.edu (David Scott Warren)
Newsgroups: comp.lang.prolog
Subject: Re: SBProlog
Date: 26 Aug 1993 14:22:56 GMT
Organization: State University of New York, Stony Brook
Lines: 42
Message-ID: <25ih00$34m@newsserv.cs.sunysb.edu>
References: <25fjgaE7mf@uni-erlangen.de> <2618@lunic.luth.se> <1993Aug25.174311.4199@cs.sfu.ca>
NNTP-Posting-Host: sbwarren.cs.sunysb.edu

Responding to the questions concerning SB-Prolog (old and unsupported) and
XSB (new and supported to the extent we can):

I would encourage people NOT to take SB-Prolog, but to take XSB
instead.  The one reason still to take SB-Prolog is for DOS. XSB
doesn't run under DOS and we have no plans to port it there. (If
someone else would like to, that would be fine.) We do want to make
XSB run on as many workstation platforms as possible. We've recently
ported it to SGI and DECStations. We are trying to make it easier to
port, so if you have a unix (or POSIX) system and want to port it,
we'd be happy to help.

We feel that XSB is more robust than SB-Prolog, having found a number
of bugs and having fixed them.  On the other hand we may have
introduced others. If anyone finds bugs, we'll do our very best to
track them down and fix them.  With regards to efficiency: the XSB
compiler is quite a bit faster than the SB-Prolog compiler for all
programs (other than tiny ones) and the speed of the generated code
(LIPS measurements) is about the same, and we're working to improve it
some.

We are working on extending and improving XSB. We've recently moved
the code that does `assert' from Prolog into C, to speed it up (not yet
in the released version, but will be soon). The reason I didn't
respond to the questions on the net earlier is that I've not been
reading the net but have been programming like mad trying to get
multiple argument indexing into the assert code (which is what another
net poster was trying to do on top of Quintus Prolog). So XSB should
be improving.

And last but not least, you should take XSB (over all other Prologs,
including SB-Prolog) because it supports tabling (OLDT evalution) at
the engine level.  Properly used this can make some programs MUCH
cleaner and shorter and faster.  We are beginning to do benchmarks of
tabling uses of the system, and are finding it quite efficient. Try
it, you'll like it.

-David
	Prof. David S. Warren
	University at Stony Brook
	Stony Brook, NY 11794-4400
	warren@cs.sunysb.edu



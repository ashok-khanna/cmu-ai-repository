Package:      lang/prolog/code/bench/

Name:         

Summary:      Prolog Benchmarking Suites

Version:      

Description: 

   This directory contains code for benchmarking Prolog implementation
   compatibility and performance.

   Naive reverse is the classical benchmark for computing LIPS (Logical
   Inferences Per Second). However, the utility of small benchmark
   programs like naive reverse (NREV) is questionable, since it may not
   necessarily reflect overall system performance. For example, NREV
   doesn't exercise the two main features of Prolog -- backtracking and
   unification. In practice, performance on large programs is much more
   important. Some of the benchmarks use larger programs, such as
   cryptarithms, theorem provers, and chart parsing, to give a better
   picture of system performance on real problems. Thus it is better
   to use the Pereira or Holmer benchmarks than the NREV benchmark.

Requires:     

Ports:        

Origin:       

Copying:      

Updated:      

CD-ROM:       Prime Time Freeware for AI, Issue 1-1

Bug Reports:  

Mailing List: 

Author(s):    

Contact:      

Keywords:     

   Prolog!Code, Prolog!Benchmarks, Benchmarks!Prolog,
   Symbolic Differentiation, Quicksort,
   8-Queens, Cryptarithms, Theorem Proving, Database Querying,
   Chart Parsing, Parsing

Contains:    

   dobry.txt          Dobry's benchmarks

   ecrc.tar           The ECRC benchmarks

   holmer.tar         Bruce Holmer, Peter Van Roy, and Alvin Despain's
                      benchmarks.  Includes symbolic differentiation,
                      quicksort, 8-queens puzzle, cryptarithms,
                      theorem provers, database querying, and chart
                      parsing, among others. 

   nrev.pl            Prolog "Naive List Reverse" Benchmark
                      Norbert Fuchs, Department of Computer Science,
                      Zurich University 

   pereira.txt
   pereira.tar        Fernando Pereira's benchmarks (26-DEC-86)
                      These benchmarks are designed to identify
                      strengths and weaknesses in the basic engine of
                      a Prolog system. This benchmark tries to
                      separate costs normally conflated in other
                      benchmark suites, such as procedure call cost,
                      term matching and term construction costs and
                      the costs of tail calls vs. nontail calls. 

   plbench.txt        A short post of benchmarks by Brahme

   portland.tar       The Tektronix/Portland State Univ benchmarks

   wgsym.tar          The 1985 WGSYM Lisp/Prolog contest benchmarks
                      (WGSYM of Information Processing Society of Japan)

See Also:    

References:   

  holmer.tar contains the benchmarks that were used in the papers:

      Bruce Holmer et al (holmer@ernie.berkeley.edu), "Fast Prolog with an
      Extended General Purpose Architecture", 17th International Symposium
      on Computer Architecture, May 1990.

      Peter Van Roy (vanroy@ernie.berkeley.edu) and Alvin Despain, "The
      Benefits of Global Dataflow Analysis for an Optimizing Prolog
      Compiler", 1990 North American Conference on Logic Programming,
      October 1990.


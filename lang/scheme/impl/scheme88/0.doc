Package:      lang/scheme/impl/scheme88/

Name:         Scheme88

Summary:      Scheme84 ported to Common Lisp.

Version:      0.4 (28-JUL-91)

Description: 

   Scheme88 is a re-implementation of Indiana University's Scheme84
   to run in Common Lisp. The port was developed at the Rice University
   Department of Computer Science.

   Major improvements include
      (1) the inclusion of a correct hygienic macro expander for
          Kohlbecker's extend-syntax [0, 1];

      (2) the inclusion of new control operators, namely, F to grab
          FUNCTIONAL continuations, and RUN (or the syntactic abbreviation #>),
          to delimit the extent of control operations [2, 3];

      (3) an on-line help facility that provides simple descriptions of
          built-in functions and syntactic forms.

Requires:     

Ports:        Runs in Ibuki CL, but should be easy to port to other
              Common Lisp implementations.

Origin:       titan.rice.edu:public/scheme88.sh
              (No longer exists. Now available from Scheme Repository only.)

Copying:      Copyright (c) 1985 Indiana University
              Copyright (c) 1991 Rice University
              Use, copying, and distribution permitted. (See file
              NOTICE for details.)
  
Updated:      

CD-ROM:       Prime Time Freeware for AI, Issue 1-1

Bug Reports:  

Mailing List: 

Author(s):    

Contact:      

Keywords:     

   Scheme!Implementations, Programming Languages!Scheme, Scheme88,
   Scheme in Common Lisp, Indiana University, Rice University

Contains:    ???

See Also:    

   lang/scheme/impl/scheme84/

References:   

   [0] Kohlbecker, E. and M. Wand, "Macro-by-example: Deriving
       syntactic transformations from their specifications", in Proceedings
       of the 14th ACM Symposium on Principles of Programming Languages,
       1987, pages 77-85.

   [1] Kohlbecker E., D.P. Friedman, M. Felleisen, and B.~Duba, 
       "Hygienic macro expansion", in Proceedings of the 1986 ACM
       Conference on Lisp and Functional Programming, 1986, pages 151-161.

   [2] Felleisen, M., M. Wand, D.P. Friedman, and B.F. Duba, "Abstract
       Continuations: A mathematical semantics for handling full functional
       jumps", in Proceedings of the 1988 Conference on Lisp and Functional
       Programming, 1988, pages 52-62.

   [3] Sitaram, D. and M. Felleisen, "Control delimiters and their
       hierarchies", Lisp and Symbolic Computation, in press.

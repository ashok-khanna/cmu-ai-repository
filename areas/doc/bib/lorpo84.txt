                  LOGIC PROGRAMMING and PROLOG BIBLIOGRAPHY
                             October 1984
                 (obtained from Dialog Information Services)


     Title :  "Expert Systems:  An Alternative Paradigm"
     Authors :  Coombs, M.;  Alty, J.
        Dept.  of Computer Sci., Univ.  of Strathclyde, Glasgow, Scotland
     Journal :  Int. J. Man-Mach. Stud.  (GB)
                Vol. 20, No. 1, pp. 21-43 
                Jan., 1984
     Call Number : QA 76 I6
     Treatment :  Theoretical
     Document Type:  Journal paper
     Languages:  English
     (30 refs)

          There has recently been a significant effort by the AI  community
     to  interest  industry  in  the potential of expert systems.  However,
     this has resulted in far fewer substantial applications projects  than
     might  be  expected.   This  article argues that this is because human
     experts are rarely required to perform the  role  that  computer-based
     experts are programmed to adopt.  Instead of being called in to answer
     well-defined problems, they are  more  often  asked  to  assist  other
     experts  to extend and refine their understanding of a problem area at
     the junction of their two domains of knowledge.   This  more  properly
     involves   educational   rather   than   problem-solving  skills.   An
     alternative approach to expert system design is  proposed  based  upon
     Guided  Discovery  Learning.   The  user is provided with a supportive
     environment  for  a  particular   class   of   problem,   the   system
     predominantly   acting   as  an  adviser  rather  than  directing  the
     interaction.  The environment includes a database of domain knowledge,
     a  set of procedures for its application to a concrete problem, and an
     intelligent machine-based adviser to judge  the  user's  effectiveness
     and to advise  on strategy.  The procedures focus upon the use of user
     generated 'explanations' both to promote  the  application  of  domain
     knowledge  and  to expose understanding difficulties.  Simple database
     Prolog is used as the subject material for the prototype system  which
     is known as Mindpad.

     Title  :   "Temporal  Logic  Based  Hardware   Description   And   Its  
                 Verification With Prolog"
     Authors :  Fujita, M.;  Tanaka, H.;  Moto-oka, T.
        Dept. of Electrical Engng., Univ. of Tokyo, Tokyo, Japan
     Journal :  New Generation Comput.  (Japan)
                Vol. 1, No. 2  pp. 195-203 
                1983
     Call Number : QA 76 N48
     Treatment :  Practical
     Document Type :  Journal paper
     Languages :  English
     (9 refs)

          Techniques of  hierarchical  specification  and  verification  of
     hardware  with  Temporal  Logic  and  Prolog are presented by example.
     Both hardware designs in gates and state-diagrams are translated  into
     a   relation  between  the  present  and  the  next  state,  which  is
     represented in Prolog.  Specifications  are  constructed  by  Temporal
     Logic  that can express state sequences (e.g., timing diagrams) easily
     and also are translated into a relation between the  present  and  the
     next  state  in  Prolog.   The  verification  method  is  based upon a
     Temporal Logic decision  procedure  and,  referring  to  the  relation
     tables  between the present state and the next state, the verifier can
     reason in both directions-forward and backward in temporal  sequences.
     Prolog   has   very  powerful  pattern  matching,  and  its  automatic
     backtracking capabilities facilitate easy-to-write verifier  programs.
     It  is  concluded  that  a  total verification system handling various
     design levels can be constructed with Temporal Logic and Prolog.

     Title :  "Logic Circuit Synthesis Using Prolog"
     Authors :  Uehara, T.;  Kawato, N.
        Fujitsu Labs.  Ltd., Kawasaki, Japan
     Journal :  New Generation Comput.  (Japan)
                Vol. 1, No. 2  pp. 187-93 
                1983
     Call Number : QA 76 N48
     Treatment :  Applic;  Practical
     Document Type :  Journal paper
     Languages :  English
     (11 refs)

          This paper briefly reviews the current use of CAD in logic design
     and then describes an expert system used to synthesize logic circuits.
     Specialized knowledge dealing with standard  TTL  ICS is  written  in
     Prolog and Age, and the results are compared.

     Title :  "Prolog Based Expert System"
     Author :  Mizoguchi, F.
        Dept. of Industrial Administration, Sci. Univ. of Tokyo,  Chiba,
        Japan 
     Journal :  New Generation Comput.  (Japan)
                Vol. 1, No. 1  pp. 99-104 
                1983
     Call Number : QA 76 N48
     Treatment :  Practical
     Document Type :  Journal paper
     Languages :  English
     (9 refs)

          A Prolog based expert system called Aplicot  is  described.   Its
     basic  design  framework  is  the  same  as  used  for other languages
     implementing expert systems.  This  utilization  of  the  same  design
     framework  permits  a  comparison  to  be  made  of system performance
     obtained within the same  domain  of  knowledge.   The  domain  chosen
     involves   a  reactor's  fault  diagnostic  system  consisting  of  76
     production rules.  The results of this  comparison  show  the  overall
     performance  of  Aplicot  to  be  of the same level as that of Expert,
     Emycin and Adips, which were developed in the past utilizing different
     programming  languages.   Although  its code size is ten times smaller
     than that of Lisp or Fortran based expert systems, Aplicot's  backward
     and  forward  reasoning  system  gives  it  the  same  level of system
     performance and flexible inference strategy as  these  other  systems.
     It  thus  demonstrates  the  potential software productivity of Prolog
     based expert systems.


     Title :  "Poplog:  A Multi-Language Program Development Environment"
     Authors :  Sloman, A.;  Hardy, S.;  Gibson, J.
        Univ. of Sussex, Brighton, England
     Journal :  Inf. Technol. Res. and Dev.  (GB)
               Vol. 2, No. 2-3  pp. 109-22 
               July, 1983
     Call Number : 
     Treatment :  Applic;  Practical
     Document Type :  Journal paper
     Languages :  English
     (4 refs)

          Poplog, an integrated combination of  the  programming  languages
     Pop-11,   Prolog  and  Lisp  is  described  and  its  applications  in
     artificial intelligence research are  discussed.   A  system  overview
     describes  how  Prolog  and Lisp are built on top of the core language
     Pop-11, and how the system can be used interactively.  The  facilities
     provided  for  program  development  are then described, followed by a
     breakdown of the subsystem.  Some examples of the system in  operation
     are also provided.

Title : "Outline Of The Personal Sequential Inference Machine: PSI"
Authors : Uchida, S.; Yokota, M.; Yamaoto, A.; Taki, K; Nishikawa, H.
   Icot Res. Center, Inst. For New Generation Computer Technology. 
   Tokyo, Japan.
Journal : New Generation Computing. (Japan)
          Vol. 1, No. 1, pp. 75-79
          1983
Call Number : QA 76.N48 
Treatment : Practical
Document Type : Journal paper
Languages: English
(4 Refs)

PSI is a personal computer system being developed as a tool for providing
researchers with a efficient programming environment. It directly supports
logic programming languages, KL0 (Fifth Generation Kernel Languages, Version
0), with firmware and hardware. Its interpreter is implemented in the
firmware and several hardware mechanisms are provided to attain almost the
same level of performance as the DEC-10 Prolog on DEC2060. It also provides
the user with a large memory space, 40 bits*2 to 16 MW, which is essential
for developing actual application programs like expert system. To make
efficient man-machine interaction possible, such input and output devices as
bit-map display, pointing device and keyboard are provided. A local area
network is also being developed to build a distributed system. 

Title : "The Direction The FGCS Project Will Take"
Author : Fuchi, K.
  Inst. For New Generation Computer Technol., Tokyo, Japan
Journal : New Generation Computing (Japan)
          Vol. 1; No. 1 pp. 3-9
          1983
Call Number : QA 76.N48 
Treatment : General, Review
Document Type : Journal Paper
Languages : English
(2 Refs)

The nature of Japan's Fifth Generation Computer Systems Project is
discussed. Aimed at the accomplishment of basic research for innovation in
future computer technology, the project itself has no commercial objectives.
Logic programming is envisioned as the missing link unifying the various
fields of computer science and is thus emphasized. Logic is emphasized in
the approach to knowledge engineering as is the need for radically more
powerful computer tools for research on artificial intelligence. Logic is also
stressed as the key to developing parallel architecture. 

Title : "The Design And Implementation Of A Personal Sequential Interface 
   Machine: PSI"
Authors : Yokota, M.; Yamamoto, A.; Taki, K.; Nishikawa, H.; Uchida, S.
   Icot Res. Center,Inst. For New Generation Computer Technol., Tokyo, Japan
Journal : New Generation Computing (Japan) 
          Vol. 1., No. 2, pp. 125-144
          1983
Call Number : QA 76.N48 
Treatment: Practical
Document Type: Journal Paper
Languages: English
(12 Refs)

A Personal Sequential Inference Machine, called PSI, is a personal computer
designed as a software development tool for the Fifth Generation Computer
System (FGCS) project. PSI has a logic based, high-level machine instruction
set, called Kernel Language Version 0 (KL0). The machine architecture of PSI
is specialized for direct execution of KL0. 'Unification' and 'backtracking'
are the principal operations in logic programming, and they are efficiently
performed by PSI hardware/firmware. Its estimated execution speed is 20K to
30K LIPS. The machine is also equipped with a large memory with a maximum of
40 bits*16 M words. This paper presents the key points of its design and the
features of its machine architecture. 

Title : "Closures And Fairness In The Semantics Of Programming Logic"
Authors : Lassez, J. L.; Maher, M.J.
   Dept. of Computer Science, Univ. of Melbourne, Parkville, Victoria, 
   Australia
Journal : Theoretical Computer Science (Netherlands) 
          Vol. 29, No. 1-2, pp. 167-184
          March 1984
Call Number : QA 76.T43
Treatment : Theoretical
Document Type : Journal Paper
Languages : English
(18 Refs)

The authors use the notions of closures and fair chaotic interactions to
give a semantics to logic programs. The relationships between the semantics
of individual rules and the semantics of the whole program are established
and an application to parallel processing is mentioned. A chaotic fixed
point theorem is given, which carries the non-determinism inherent to
resolution. They introduce a general definition of finite failure and the
concept of fair SLD resolution, and show that this procedure is sound and
strongly complete with respect to both success and finite failure, thus
extending a result of Apt and Van Emden (1982). 

Title : "An Executable Prolog Semantics"
Authors : Allison, L.
   Dept. Of Computer Science., Univ. Of Western Australia, Nedlands, Australia
Journal: ALGOL Bull. (GB) 
         No. 50, 10-18
         Dec. 1983
Call Number :
Treatment : Practical; Theoretical
Document Type : Journal Paper
Languages : English
(13 Refs)

A denotational semantics of the logic programming language Prolog is
expressed in ALGOL-68.  The result is a formal definition that is also
executable. It is presented as an example of high-order programming in
ALGOL-68; the eventual aim is to use this to compare differing brands and
implementations of Prolog formally and experimentally. 

Title : "Logic Programming In Prolog"
Author : Goodal, A.
   Expert Systems Ltd., Oxford, England
Journal : Data Processing (GB)
          Vol. 26, No. 2 pp. 37-39, 48
          March 1984
Call Number :
Treatment : Practical
Document Type : Journal Paper
Languages : English

The language Prolog has been in existence since 1971/1972, but commercial
interest has been apparent for only two or three years. This interest has
arisen for two reasons. First, from Prolog's use as a central feature of the
Japanese (and other) proposed Fifth Generation Computer Systems and second
as an ideal language in which to develop Expert Systems. 

Title : "Programming: Asserting Assertional Style"
Authors : Durham, T.
Journal : Computing (GB) pp. 22
          8 March, 1984
Call Number :
Treatment : Theoretical
Document Type : Journal Paper
Languages : English

This article looks at developments in assertional programming. Logic and
Functional Programming enthusiasts have suspended hostilities for a combined
attack on traditional languages. They found common cause in the search for
provably correct programs. 

Title : "Design For Testability Using Logic Programming"
Authors : Horstmann, P.W.
   Dept. Of Electrical Engng., Syracuse Univ., Syracuse, N.Y., U.S.A.
Journal : International Test Conference 1983. Proceedings 706-713
          Oct. 1983
          Philadelphia, P.A. U.S.A.
          Publ: Comput. Soc. Press, Silver Spring, M.D., U.S.A.
Call Number :
Treatment : Practical
Document Type : Conference Paper
Languages : English
(9 Refs)

Describes current work in the area of automating design for testability by
using techniques developed for Artificial Intelligence Applications. The
objective is to create a design for testability (DFT) expert system using
logic programming. This expert system functions as a testability expert, or a
Designer's Assistant, in that it will check for DFT rule violations and,
should these exist, transform the design to remove them. this approach is
compared to current algorithmic DFT programs. 

  C-GRAPHS: A DATA STRUCTURE FOR AUTOMATED TRANSLATION.
  CLEMENTE SALAZAR, M.A.

  CENTRO  DE  GRADUADOS  E INVESTIGACION,  INST.  TECNOLOGICO DE CHIHUAHUA,
  CHIHUAHUA, MEXICO.
  SINENCIO, E.S. (Editors).

  PROCEEDINGS OF  THE  26TH  MIDWEST  SYMPOSIUM  ON  CIRCUITS  AND  SYSTEMS
  147-50   1983
  15-16 AUG. 1983   PUEBLA, MEXICO
  Publ: WESTERN PERIODICALS,  NORTH HOLLYWOOD, CA, USA
  XIX+628 pp.

  Treatment: APPLIC; THEORETICAL.
  Document Type: CONFERENCE PAPER.
  Languages: ENGLISH.
  (11 Refs)

  Presents  the  study of a data structure that combines some advantages of
the data structures of two automated translation systems.   That  is,   the
author  develops  a  generalization  of  existing data structures to obtain
greater flexibility of representation and of treatment.  The first  section
begins  with  the  formalization of the structure and its principal notions
(substructures, order, isolatability, etc.). The second section treats some
interesting operations,  then some words are devoted to explain the  method
followed  in C-graph treatment and to describe a small system programmed in
PROLOG.  Recognition is briefly analyzed and a rewriting  system  using  an
example of sentence analysis is discussed.



  A 'FRONT-END' SYSTEM: AN EXPERT SYSTEM AS AN ONLINE SEARCH INTERMEDIARY
  POLLITT, A.S.

  DEPT.    OF   COMPUTER   STUDIES  AND  MATHS.,   HUDDERSFIELD  POLYTECH.,
  HUDDERSFIELD, ENGLAND
  ASLIB PROC.  (GB)    VOL.36,  NO.5   229-34   MAY 1984    
  Call Number : Z 673 A62 (Scott Library : Periodicals)
  Coden: ASLPAO   ISSN: 0001-253X

  Treatment: APPLIC; PRACTICAL
  Document Type: JOURNAL PAPER
  Languages: ENGLISH
  (10 Refs)

  A  brief  overview of expert systems is presented in the context of other
computer-based  information  systems  and  a  description  given   of   the
application  of  certain  expert  systems  principles  to  the  design  and
implementation of a system to act as an online  search  intermediary.   The
system,   entitled  CANSEARCH,   is written in PROLOG and allows doctors to
specify their searches for cancer therapy literature without using a  human
intermediary  and will translate them into legitimate search statements for
the MEDLINE database.



  ILEX: AN INTELLIGENT RELATIONAL DATABASE SYSTEM.
  LI, D.Y.; HEATH, F.G.

  MIN. OF ELECTRONIC INDUSTRY, PEKING, CHINA.
  SPONSOR: ACM.
  SIGPC NOT. (USA)   VOL.6, NO.2   245-52   1983  
  Call Number : QA 76 S53 (Steacie Library : Periodicals)
  Coden: SPCNDH
  1983 ACM CONFERENCE ON PERSONAL AND SMALL COMPUTERS   7-9 DEC. 1983   
  SAN DIEGO, CA, USA.
  U. S. Copyright Clearance Center Code: 0 89791 123 7/83/012/0245$00.75

  Treatment: PRACTICAL.
  Document Type: CONFERENCE PAPER.
  Languages: ENGLISH.
  (12 Refs)

  Describes  the architectural over-view of a research project called ILEX.
The discussion focuses on a  unified  approach  for  all  relational  query
languages.  A universal interface supporting three typical query languages:
ML based on ISBL,  EL based on  SOL,   and  PL  based  on  QBE,   has  been
implemented  entirely in PROLOG.  The translation of queries from a variety
of query languages into a canonical logic form is illustrated. A simple but
effective dynamic optimisation strategy is described. By means of knowledge
information processing many different query languages  can  be  implemented
using the same database management software.  Each query language supported
in a cleanly-supported component and can be modified independently from the
rest of the system,  and the underlying software  can  be  changed  without
requiring  any  change  at  the user interface.  This approach should yield
great benefits in reduced cost and increased flexibility of  implementation
and application.



  ODRADEK-A PROLOG-BASED LISP TRANSLATOR.
  JELLINEK, H.

  SDC, PAOLI, PA, USA.
  SPONSOR: IEEE.
  PROCEEDINGS  OF  THE  SEVENTH  ANNUAL MICRO-DELCON '84.  THE DELAWARE BAY
  COMPUTER CONFERENCE   18-21   1984
  6 MARCH 1984   NEWARK, DE, USA
  Publ: IEEE COMPUT. SOC. PRESS,    SILVER SPRING, MD, USA.
  VII+139 pp.   ISBN 0 8186 0554 5
  U. S. Copyright Clearance Center Code: CH2004-0/84/0000/0018$01.00

  Treatment: PRACTICAL.
  Document Type: CONFERENCE PAPER.
  Languages: ENGLISH.
  (6 Refs)

  ODRADEK is a PROLOG program that implements a  LISP-TO-LISP  source  code
translator.   It  is  based  on a set of rules stating equivalences between
forms in the two LISP dialects.  The translation is bidirectional.  ODRADEK
has  been  used to translate a number of large and small Lisp programs from
one dialect to another.



  MOD-PROLOG, A MODULAR, MICROCOMPUTER ORIENTED PROLOG.
  BATTANI, G.; GUZMAN, J.C.; MARQUEZ, A.; PEYER, M.J.

  DEPT. DE MATEMATICAS, UNIV. SIMON BOLIVAR, CARACAS, VENEZUELA
  SPONSOR: ACM
  SIGPC NOT. (USA)   VOL.6, NO.2   67-75   1983   
  Call Number : QA 76 S53 (Steacie Library : Periodicals)
  Coden: SPCNDH
  1983 ACM CONFERENCE ON PERSONAL AND SMALL COMPUTERS   7-9 DEC. 1983   
  SAN DIEGO, CA, USA.
  U. S. Copyright Clearance Center Code: 0 89791 123 7/83/012/0067$00.75

  Treatment: PRACTICAL.
  Document Type: CONFERENCE PAPER.
  Languages: ENGLISH.
  (8 Refs)

  Widespread  acceptance  of  PROLOG  has  in the past been hindered by the
following difficulties:  one impossibility of  using  libraries  of  PROLOG
programs,  the impracticality of constructing very large programs,  and the
lack of facilities for the separate compilation of  parts  of  programs  in
order  to  speed  up  systems  development.   The  authors  propose  a  new
implementation of PROLOG which is designed to solve the above problems.  It
has  new  facilities,   based  on  a  new  data  structure that permits the
definition of independent modules communicating  through  the  exchange  of
PROLOG terms.



  PC-PROLOG FOR PROCESS CONTROL APPLICATIONS.
  SZUBA, T.

  STANISLAW STASZIC UNIV. OF MINING AND METALL., CRACOW, POLAND
  ANGEW.   INF.   (GERMANY)    VOL.26,  NO.4   164-71   APRIL 1984   
  Coden: AWIFA7   ISSN: 0013-5704
  U. S. Copyright Clearance Center Code: 0013-5704/84/40164-08$03.00/0

  Treatment: APPLIC; PRACTICAL.
  Document Type: JOURNAL PAPER.
  Languages: ENGLISH.
  (8 Refs)

  PROLOG is one of the most famous languages  in  artificial  intelligence,
but offers rather little possibilities for process control applications. It
is possible to build a specially designed interface based on an interrupt
method,   which  makes  it  possible to compute some problems for PROLOG in
other languages. PROLOG then starts its activity with received solutions of
its problem.  This allows very interesting and promising approaches to many
process control applications as well as other areas.

  A COMPARISON OF PROLOG SYSTEMS.
  NOELKE, U.; SAVORY, S.

  NIXDORF COMPUTER AG, PADERBORN, GERMANY.
  ANGEW.   INF.   (GERMANY)    VOL.26,  NO.3   108-12   MARCH 1984   
  Coden: AWIFA7   ISSN: 0013-5704

  Treatment: GENERAL,REVIEW; PRACTICAL.
  Document Type: JOURNAL PAPER.
  Languages: ENGLISH.
  (7 Refs)

  This paper gives a survey of some commercially available PROLOG  systems.
Crucial  point  of  this  comparison  are the built-in-predicates (language
facilities)  and debugging aids.  Finally a set of  common  predicates  (so
called NOELKE/SAVORY-PROLOG) is introduced, which is the common set arrived
at by this comparison. Issues of cost and a recommendation are deliberately
omitted in order not to influence the market competition.



  IMPLEMENTATION OF SOME CLASSES OF INTERACTIVE DIALOG SYSTEMS WITH THE AID
  OF FIRST-ORDER PREDICATE LOGIC (PROLOG).
  BRANOVITSKII, V.I.; KUDRYAVTSEVA, S.P.

  AVTOM. AND TELEMEKH. (USSR)   VOL.44, NO.8   156-62   AUG.  1983   
  Coden: AVTEAI   ISSN: 0005-2310
  Trans in: AUTOM. AND REMOTE CONTROL (USA)   VOL.44, NO.8, PT.2   1096-103
  AUG. 1983   
  Coden: AURCAT   ISSN: 0005-1179
  U. S. Copyright Clearance Center Code: 0005-1179/83/4408-1096$07.50

  Treatment: THEORETICAL.
  Document Type: JOURNAL PAPER.
  Languages: ENGLISH.
  (16 Refs)

  Use of first-order predicate logic is reported in describing  interactive
dialog algorithms.  The PROLOG language is briefly outlined and examples of
PROLOG-based interactive systems are presented.



  HUNGARY STRETCHES A HAND OUT TO THE WEST.
  WALTON, P.

  COMPUTING (GB)   27   24 MAY 1984   
  Coden: CPTGB5   ISSN: 0144-3097

  Treatment: GENERAL,REVIEW.
  Document Type: JOURNAL PAPER.
  Languages: ENGLISH.

  Hungary straddles a widening 'age'  gap between fifth generation computer
systems being developed in the West and the  antiquated  computing  of  the
Eastern bloc. Their work on PROLOG, the machine language of expert systems,
is brought into focus in this article.

  Title   : "Efficient Processing Of Interactive Relational Database  
             Queries Expressed In Logic"
  Author  : Warren, D.H.D.
            Dept. of Artificial Intelligence, 
            Univ. of Edinburgh, Edinburgh, Scotland
  Sponsor : IEEE; ACM; Inst. Nat. Recherche En Inf. Autom.
  Journal : Proceedings Of The Seventh International Conference On Very 
            Large Data Bases   
            pp.272-281,  9-11 Sept. 1981,  Cannes,  France
  Publication   : IEEE, New York, USA 
  Treatment     : Application
  Document Type : Conference paper
  Languages     : English
  (22 Refs)

         Relational  database  retrieval  is  viewed  as  a special case of 
  deduction  in logic.  It is  argued  that  expressing  a  query  in logic 
  clarifies  the  problems involved in processing  it  efficiently  ('Query  
  Optimisation').   The  author describes  a  simple but effective strategy 
  for planning a  query so that  it  can  be  efficiently  executed  by the 
  elementary  deductive  mechanism  provided in  the  programming  language  
  Prolog. This planning algorithm has been implemented as part of a Natural 
  Language Question Answering System, called Chat-80. The Chat-80 method of 
  query  planning  and  execution  is  compared with the strategies used in 
  other relational database systems, particularly Ingres and System R.


  Title     : "Prolog"
  Author    : Welham, B.
  Journal   : Comput. Age (GB)
              No.8,  pp.35-36,   July 1980   
  Treatment : Application
  Document Type : Journal paper
  Languages     : English

         Introduces some of the basic ideas  behind  the  use of  Predicate 
  Logic as a practical  computer  programming  language.   The approach  is
  not that of a logician but rather that of a computer programmer.


  Title   : "Solving Problems In Prolog"
  Author  : Welham, R.
            Dept. of Artificial Intelligence, 
            Edinburgh Univ., Edinburgh, Scotland
  Journal : Comput. Age (GB)
            No.9,  pp.59-60,   Aug. 1980  
  Treatment : Application,  Practical
  Document Type : Journal paper
  Languages     : English

         Examines  how  knowledge  of  the  theorems  of  Elementary  Plane 
  Euclidean Geometry can be  formulated  as a computer program that capable 
  of  solving  geometrical   problems,  and  uses  a  representation in the 
  language Prolog to illustrate this.


  Title   : "State-space Sets, State-space Graphs and N-prefix Expressions"
  Author  : Kofalusi, V.; Halmay, E.
            CSO Internat. Computer Education and Information Centre,
            Budapest, Hungary 
  Journal : Sigsam Bulletin Abstract  (USA)
            Vol.15,  No.1,   pp.33-36,   Feb. 1981   
  Call No.: QA 76.7 A75A  (Steacie Library : Periodicals)
  Treatment : Application,  Theoretical
  Document Type : Journal paper
  Languages     : English
  (17 Refs)

       Discusses  some  methods for solving  a  crucial problem  in formula
  manipulation.  This   problem  arises  when  a  tree  is  elected as  the
  best-fitting  data  structure  for  the representation of a formula.  The 
  usage  of  trees  always  involves  the permanent danger of combinatorial 
  explosion in storage  requirement.   The  authors  outline some solutions 
  trying to grasp this problem from  different  points  of  view.  However,  
  these solutions  are connected to each other by their  common theoretical 
  background. The authors start introducing some new set theory notion they 
  need, then they discuss implementation problems of a programming language  
  Prolog,  i.e., those theoretical  considerations  which  are  expected to  
  result  considerable improvements for  Prolog's  implementations. Finally  
  they  briefly  mention  a new concept,  Mathematical Data Structure,  and 
  its usage.


  Title   : "Toward A Prolog Text Grammar"
  Author  : Silva, G. ; Dwiggins, D.
  Journal : Sigart Newsletter (USA)
            No.73,   pp.20-25,   Oct. 1980  
  Call No : BF 311 A75A  (Steacie Library : Periodicals)
  Treatment : Practical
  Document Type : Journal paper
  Languages     : English
  (8 Refs)

       Considers  the  syntactic  and  semantic  processing  components, the 
  Text Grammar, of an application-oriented experimental  natural-language
  understanding  system,   called  Matres,  currently  under development at
  Operating Systems Incorporated.   The primary application for this system 
  is   the  automated  generation and update  of  data  bases  from natural 
  language text. The current version of  the Text  Grammar  is  implemented  
  in  the programming  language  Prolog,   which  provides  a  unified  and  
  powerful  environment,   capable  of  representing   the  structures  and 
  processes  required for the analysis of natural language text.


  Title   : "The Versatility Of Prolog"
  Author  : Baxter, L.
            Dept. of Computer Sci., York Univ., Downsview, Ontario, Canada
  Journal : Sigplan Notices (USA)
            Vol.15,  No.12,   pp.15-16,   Dec. 1980  
  Call No.: QA 76.5 A78A Pt.2  (Steacie Library : Periodicals)
  Treatment : Practical
  Document Type : Journal paper
  Languages     : English
  (3 Refs)

       Prolog is a general purpose programming  language based on predicate
  logic.  It has  been  used  to perform sophisticated tasks,  often in the 
  field  of  artificial  intelligence.   Examples   are  natural   language  
  analysis,  symbolic  integration,   plan  formation,   drug   interaction 
  prediction,  and  data  base systems.   The  purpose  of  this note is to 
  demonstrate  the  versatility  of  predicates in  Prolog  by  solving the  
  following  problem  from   recreational mathematics:   
     what number ending in 5 can be multiplied by 5 by moving the last 5
     to the front?  i.e., solve
        d/sub 1/d/sub 2/ ... d/sub n/5*5 = 5d/sub 1/d/sub 2/ ... d/sub n/,
     or equivalently, solve 
        d/sub 1/d/sub 2/ ... d/sub n/50/2=5d/sub 1/d/sub 2/ ... d/sub n/
     where the d/sub i/s are the digits in a decimal representation.   
  Whereas the  solution to this problem in procedural programming languages  
  requires  an  algorithm  specific  to  the  problem,  in  the declarative 
  programming language Prolog, the solution arises trivially from a general 
  predicate.



  Title   :  "Implementing A Very High Level Language On A Very Low Cost 
             Computer"
  Author  :  Kanoui, H.;  Van Caneghem, M.
             Faculte Des Sci. De Luminy, Univ. D'aix-Marseille II, 
             Marseille, France
  Journal :  Information  Processing 80 :
             Proceedings of the IFIP Congress 80
             Lavington, S. (Editors)
             pp.349-354,  Oct. 1980,   Tokyo, Japan
  Publ    :  North-Holland,  Amsterdam, Netherlands
  Treatment : Practical
  Document Type : Conference paper
  Languages     : English
  (12 Refs)

       The implementation on a  microcomputer  of  Prolog,   an  Artificial
  Intelligence  language,  is presented.  Such a language,  available until 
  now on  large  computers  only,   could  not  be  implemented  on  a  low  
  cost  microcomputer  without  using  a floppy disk virtual memory.  It is 
  shown  that  this  approach,   apparently  impossible,  yields reasonable 
  performance.   The  general  methodology  of  the  implementation is also 
  discussed  in  terms  of  an  abstract  machine (Micromegas) supporting a 
  language (Candide)  in which the  Prolog  system  is  written.  A careful 
  performance  analysis  indicates  what should be a good configuration for 
  supporting the system in the future.


  Title   :  "The Prolog Phenomenon"
  Author  :  McDermott, D.
             Yale Univ., New Haven, CT, USA
  Journal :  Sigart Newsletter (USA)
             No.72,   pp.16-20,   July 1980  
  Call No :  BF 311 A75A (Steacie Library : Periodicals)
  Treatment : Practical
  Document Type : Journal paper
  Languages     : English
  (16 Refs)

       Prolog  (Programming in  Logic)  is  a  language  which  embodies  a 
  procedural interpretation  of deduction.  It contains certain features of 
  all  languages  such  as  pattern matching and an assertional database so 
  that the  user does not have to implement them. List structure, result of
  building and pattern matching are  combined in a different way from Lisp.  
  Instead  of  functions, Prolog  has relations,  which are ordered sets of 
  clauses.


  Title   :  "Solving Mechanics Problems Using Meta-level Inference"
  Author  :  Bundy, A.; Byrd, L.; Luger, G.; Mellish, C.; Palmer, M.
             Edinburgh Univ., Edinburgh, Scotland
  Journal :  Expert Systems In The Micro-electronic Age.  
             Michie, D. (Editors)
             PP.50-64,  July 1979
  Publ    :  Edinburgh Univ. Press,  Edinburgh, Scotland
  Call No :  QA 76.24 E88  (Steacie library)
  Treatment : Application; Theoretical
  Document Type : Conference paper
  Languages     : English
  (18 Refs)

       Describes  a program (Mecho), written in Prolog, which solves a wide 
  range  of  mechanics  problems   from   statements   in   both  Predicate  
  Calculus  and  English.  Mecho uses the technique of meta-level inference 
  to  control  search  in  natural  language  understanding,  common  sense 
  inference,  model formation and algebraic manipulation.

     Title : " The Use of Logic Programming in Information Retrieval 
	       Experimentation "
     Author : Eastman, C.M.
              Dept. of Computer Sci. and Engng., Southern Methodist Univ.,
	      Dallas, Texas, U.S.A.
     Editors : Vondran, R.F.;  Caputo, A.;  Wasserman, C.;  Diener, R.A.V. 
     Conference : Productivity in the Information Age,
     Proceedings of the 46th ASIS Annual Meeting 1983
	2nd - 6th of October, 1983.
     Location of Conference : Arlington, Virginia, U.S.A.
     Publisher : Knowledge Industry Publications, White Plains, New York, 
	U.S.A.
     Call Number : not available 
     Treatment : General, Review
     Document Type : Conference paper
     Languages : English
     (9 refs)
     
          The use of some form of logic both to describe data and to write
programs is the foundation of several of  the very high level languages
(VHLLS) developed in recent years, including Prolog and Loglisp.  Like
other VHLLS, such   languages   offer  potential  for  dramatic  increases
in  software  development productivity.  They have  been  used  to 
develop  experimental systems in many different areas,  including natural
language processing and database management.   Despite  problems,   they 
show  potential  for  the development  of  information  retrieval  systems
for experimental work and  prototypes, where rapid development and
flexibility are very important. 


     Title : " Overview and Introduction to the Fifth Generation "
     Author : Moto-Oka, T.
  		   Univ. of Tokyo, Tokyo, Japan
     Editor : Scarrott, G.G. 
                  Fifth Generation Computer Project, State of the Art Report   
                        pp. 3 - 16, March 16, 1983.
     Publisher : Pergamon Infotech, Maidenhead, Berks., England
     Call Number : QA 76 148 ser11 no.1
     Treatment : General, Review
     Document Type : Book Chapter
     Languages : English

          Computers which have a large  capacity for non-numeric data
processing should be developed in order to satisfy and expand new 
applications, which will  become  predominant  fields  in  information
processing in the 1990s. Knowledge  information  processing, forming 
the  main  part  of  applied  artificial  intelligence, is expected to be
one of the important fields in the 1990s, and the dedicated computers
necessary for this  field  have been selected  as  the  main  theme  of 
the  Japanese National Fifth Generation Computer Project.  The key
technologies for the fifth  generation  computer system seem to be VLSI
architecture, parallel processing, such as data flow control,  logic
programming,  knowledge-based systems  based on  relational databases, 
and applied artificial intelligence and pattern processing. 


     Title : " The Prototype Nixdorf Expert-System "
     Author :  Savory, S.E.
                    Nixdorf Computer Ag, Paderborn, Germany
     Journal : Angew. Inf.  (Germany)    
               Vol. 25,  No. 11,  pp. 478-482
               November 1983.
     Call Number : QD 1 A47
     Treatment : Theoretical
     Document Type : Journal paper
     Languages : English
     (2 refs)

          Nixdorf Computer Ag. have been  working on  artificial   intelligence
techniques.  At the Hannover Trade Fair 1983,  they showed the prototype
of an expert system, with multilingual interchangeable knowledge  bases. 
This  paper  describes  the  aims  and  motivation  of  Nixdorf, as  well 
as the methodology and characteristics of  the  prototype  system.  
Finally,   an annotated  dialogue  of  a typical user consultation with
the expert system  used to configure Nixdorf's computer, is shown. 


     Title : " The Fifth Generation Project - A Trip Report "
     Author : Shapiro, E.Y.
                 Dept. of Appl. Math., Weizmann Inst. of Sci., Rehovot, Israel
     Journal : Commun. ACM (U.S.A.) Vol. 26,  No. 9,  pp. 637-641   
	       September  1983.
     Call Number : QA 76 A74
     Treatment : General, Review
     Document Type : Journal paper
     Languages : English
     (14 refs)

          As part of Japan's effort to become a leader in the computer
industry, the  Institute  for  New  Generation  Computer  Technology  has 
launched a revolutionary ten-year plan for the development of large 
computer systems, which will be applicable to knowledge information
processing systems. These fifth  generation  computers  will  be  built 
around the concepts of logic programming.  In  order  to  refute  the 
accusation  that  Japan  exploits knowledge  from  abroad  without
contributing any of its own,  this project will stimulate original
research, and will make its results available to the international
research community. 


     Title : " Artificial Intelligence "
     Author : Ennals, R.
                   Imperial Coll. of Sci. and Technol., London, England
     Editor : Rushby, N.J. 
                   Computer-Based Learning., State of the Art Report   
                        pp. 59 - 72,  1983.
     Publisher : Pergamon Infotech, Maidenhead, Berks., England
     Call Number : QA 76.I48ser.
     Treatment : Bibliography; Practical
     Document Type : Book Chapter
     Languages : English
     (111 refs)

          The  need for change in current approaches to educational computing
is stressed in this paper.   The  activity  of  artificial  intelligence 
(AI) researchers   has   reflected   a  dissatisfaction  with  the 
conventional numerically-oriented application of computers.  An
explanation is given of the  new  central  position of AI research in
computer science and national economic development.  Particular reference
is made to the Japanese  Fifth Generation Computer Project and to logic
programming. The growing influence of  AI  on educational computing is
assessed,  with particular reference to its application in the classroom. 
Examples are given of the use  of  logic and Prolog in this area. 





       Title:  The Future of Programming Languages
       Author:  Turner, D.  A.
                 Univ. of Kent, Canterbury, England
       Editor:  Wallis, P. J. L.
       Book Title: Software  Engineering: Developments. State of the Art Report
                    pp. 129-135, 1983.
       Publ: Pergamon Infotech, Maidenhead, Berks., England
       Call Number: QA 76.I48ser.11no.3
       ISBN: 0 08 028574 0
       Treatment: General,Review
       Document Type: Book Chapter
       Languages: English

            Powerful economic  forces  and  the  current  software  crisis 
will precipitate  very  radical changes in programming practices.  The
need to dramatically reduce  software  production  costs  is  paramount 
and  the problems resulting from existing programming languages are
examined.  The  major factors which will determine the  evolution  of 
languages  in  the future  are considered, and the impact of very large
scale integration is stressed.  Finally, alternative  language 
technologies,  including  ADA, Lisp  and APL, are discussed, together
with non-procedural languages such  as Prolog. 



       Title:  Prolog Comes into its Own (Comparison with Lisp)
       Author:  Samson, J.
       Journal Name:  Computing (GB)   24   22 SEPT. 1983   Coden: CPTGB5
            ISBN: 0144-3097
       Call Number: Not Available
       Treatment: General,Review; Practical
       Document Type: Journal Paper
       Languages: English

            Lisp is, at the moment, the most widely used language for
artificial  intelligence.   Prolog, however, is now making its presence
felt and both are also available for personal computers.  This article
briefly compares  the   two   and   assesses   their  suitability  for 
personal  computing applications. 



       Title:  A Prolog Implementation of Query-by-Example
       Author:  Neves, J.C.; Anderson, S.O.; Williams, M.H.
                Dept. of Computer Sci., Heriot-Watt Univ., Edinburgh, Scotland
       Editor:  Schneider, H.J.
       Conference Name:  Proceedings  of the International Computing Symposium
                         on Application Systems Development
                         pp. 318-332
                         22-24 March 1983   Nurnberg, Germany
       Publ: B.G. Teubner,    Stuttgart, Germany  528 pp.   ISBN 3 519 02432 2
       Call Number: QA 75.5I57 1983
       Treatment: Application
       Document Type: Conference Paper
       Languages: English


            Prolog is a programming language which is particularly  well 
suited to data base applications.  However, since formulating queries
for Prolog data bases requires a knowledge of Prolog syntax,  various 
workers  have  been  involved  in  developing  better  interfaces  to
Prolog data bases. Query-by-example (QBE) is a data base management
language which  provides  a  simple interface to relational data bases
and which has a syntax which is very similar to Prolog goals.  The
authors examine the  correspondence  between QBE and Prolog from the
viewpoint of a particular implementation, and conclude that QBE is a
natural choice as an interface to Prolog data bases.



       Title:  Comparison of Languages for Artificial Intelligence
       Author:  Billon, J.P.
       Conference Name:  Productivite et Informatique: pour une entreprise
           dynamique.  Recueil des conferences du printemps convention
           (productivity and data processing:  two essentials  for  a  dynamic
           company.  Proceedings of the spring convention) 250-4 vol.1   1983
           30 May-3 June 1983   Paris, France
       Publ: Printemps Convention,    Paris, France   2 vol. (319+432) PP.
       Call Number: Not Available
       Treatment: Practical
       Document Type: Conference Paper
       Languages: English

            Expert systems are bringing a new approach to software, not 
relying upon  procedural programming.  This may be of great importance
for future software engineering, not only for applications which have to
 deal  with artificial  intelligence.   As  production systems seem to
be well suited for declarative programming,  an  informal  presentation 
of  their  main features is given. 



       Title:  Dated - A Language to Describe Plans and Strategies in Automatic
               Deduction Systems
       Author:  Mazario, F.J.G.
                Dept.   de  informatica  teorica  e inteligencia artificial,
                Facultad de Informatica, San Sebastian, Spain
       Editors:  Ferrate, G.; Puente, E.A.
       Sponsor: IFAC; IFIP
       Conference Name:  Software for Computer Control 1982.  Proceedings of 
	the  Third  IFAC/IFIP Symposium   pp. 371-375   1983
                         5-8 Oct. 1982   Madrid, Spain
       Publ: Pergamon,    Oxford, England   XII+528 pp.   ISBN 0 08 029352 2
       Call Number: TJ 212.I4815 1979
       Treatment: Theoretical
       Document Type: Conference Paper
       Languages: English

            Dated is  a  simple  but  powerful  tool  for  the  construction 
of automatic  deduction  systems.   The kernel of the system is a high
level language and its translator.  The language provides the deduction 
system designer with statements to define collections and classes of
axioms in a declarative way.  It also allows the  use  of  plans  and 
strategies to control  the application of deduction rules and the
filtering of results. Plans and strategies are also defined in a
declarative way. The  author briefly  describes the main characteristics
of the language and their use with a specific example.   Unlike  other 
languages  used in  artificial intelligence  applications  (Prolog, 
Planner),  Dated allows the user to easily define and control the
demonstration strategy. 



       Title:  Prolog as a System Design Tool
       Author:  Dwiggins, D.
       Editor:  Berg, H.K.; Howden, W.E.; Panko, R.R.; Spraque, R.H., Jr.;
                Shriver,  B.; Walker, T.M.; Cousins, T.R.
       Sponsor: Univ. Hawaii; Univ. Southwestern Louisiana
       Conference Name: Proceedings of the Sixteenth Hawaii International
                       Conference  on  System Sciences 1983   pp. 14-23   1983
                         5-7 Jan. 1983   Honolulu, HI, USA
       Publ: Hawaii Int. Conference Syst. Sci., HI, USA  2 vol.
             (x+686+xii+604) pp.
       Call Number: Not Available
       Treatment: applic; practical
       Document Type: conference paper
       Languages: English

            The Prolog programming language originated as an  outgrowth  of 
the work  in  automatic  theorem  proving.   It  comprises  an  almost
purely declarative syntax and semantics based  on  a  form  of  the 
first-order predicate calculus, combined with a simple control algorithm
which allows for a fairly efficient implementation, both in terms  of 
execution  time and  memory  usage.  This paper describes the use of
Prolog as a software system design language which, in  addition  to 
providing  precision  and clarity,  allows designs to be tested in
execution.  Mention is also made of the usability of Prolog in  small 
machine  environments  with  modest amounts of memory. 



       Title:  Arise, Prolog with Graphics!
       Author:  Ball, D.
       Journal Title:  Leicester Univ. School of Education, Leicester, England
                       Comput.  Sch.  (GB)    Vol.5,  no.3   77-81   April 1983
                       Coden:  COSCEI   ISSN: 0263-0982
       Call Number: Not Available
       Treatment: Practical
       Document Type: Journal Paper
       Languages: English

            Prolog, a relatively new programming language with  a  syntax 
quite different from that of most general-purpose languages, has been
available on some microcomputers in a version which does not  support 
the  use  of graphics.   A  low-price  version  of  Prolog  with
graphics will shortly  become available on several popular makes of
microcomputer;  this article reflects  on this development and hints at
some of the many possibilities which this will open up for
computer-based learning in schools. 


       Title:  Programming in Logic (Computer Language)
       Author:  Goodall, A.
       Journal Title:  Comput.   Syst.  (GB)    Vol.3,  No.7   61-3   July 1983
                       Coden:  COSYEG 	ISSN: 0264-4193
       Call Number: Not Available
       Treatment: General,Review
       Document Type: Journal Paper
       Languages: English

            Looks at the growth of a Prolog, a computer language that forms 
the basis of the kernel for Japan's Fifth Generation Computer Project. 



       Title:  Introduction to Prolog. a 'Fifth-Generation' Language
       Author:  Clocksin, W.F.; Young, J.D.
                Cambridge Univ., Cambridge, England
       Journal Title:  Computerworld  (USA)  Vol.17, No.31 InDepth/1-/16
                       1 Aug.  1983   Coden: CMPWAB   ISSN: 0010-4841
       Call Number: Not Available
       Treatment: General,Review
       Document Type: Journal Paper
       Languages: English

            Gives an introduction  to  Prolog,  a  so-called  'Fifth 
Generation Language' which incorporates a certain amount of artificial
intelligence. Examples of Prolog applications are  given,  and  a 
language  primer  is given. 





       Title:  Prolog Compared with Lisp?
       Author:  O'Keefe, R.A.
                Dept. of Artificial Intelligence, Univ. of Edinburgh,
                   Edinburgh, Scotland
       Journal Title:  SIGPLAN  Not.  (USA)  Vol.18, no.5 pp. 46-52 May 1983
                       Coden:  SINODQ   ISSN: 0362-1340
       Call Number: QA 76.5A78a
       Treatment: Practical
       Document Type: Journal Paper
       Languages: English

            In the recent ACM symposium  on  Lisp  and  functional 
programming, there  was a paper with the title 'Prolog Compared with
Lisp' (1977).  In it, Gutierrez presents a program  in  Lisp,  and  a 
related  program  in Prolog,  and  uses  the  inferior performance of
the latter to suggest in strong  terms  that  advocates  of  Prolog  may
have   over-stated   its performance.   However,  his program makes
very poor use of Prolog.  This article points out which features of
Prolog have been misused  and  give  guidelines  for  their proper use. 
The author also compares a new Prolog and Lisp program performing a
similar task, and find that  the  execution  times are comparable. 







  TOWARDS A THEORY OF TOPICS
  P. Jackson (Inst. of Educational Technol., Open Univ., Milton Keynes,
  England). Comput. & Educ.  (GB),  vol.8, no.1, p.21-6 (1984).
 
  Coden: COMEDR  ISSN: 0360-1315
  U. S. Copyright Clearance Center Code: 0360-1315/84$3.00+0.00
  Treatment: THEORETICAL
  Document Type: JOURNAL PAPER
  Languages: ENGLISH
  (5 Refs)

  This paper attempts to address a few of  the  theoretical  and  practical
problems  surrounding  the  exposition of a topic by a computer program.  A
topic is defined as a system of concepts which must be formalised before it
can be expounded.  The formalisation  of  a  topic  poses  representational
problems  of  logical  adequacy,  but the underlying structure is that of a
cluster of concepts which appear in each other's pre- and postconditions of
application. A text, on the other hand, is a sequence of inscriptions,  and
therefore  a  linear  formalisation  of  a  conceptual system which may not
itself be linear.  This poses problems of control,  since one has to decide
where  to  begin  and  what  to  explicate in terms of what.  The resultant
structure of a text can  be  viewed  as  a  pragmatic  realisation  of  the
structure of its topic, an unfolding of the conceptual system which employs
a  number of expository mechanisms to make the propositional content of the
text acceptable to the epistemology of the reader.  It  is  suggested  that
some  of  these  mechanisms  can  be  related  to certain logic programming
constructs in a simple way,  and that such languages might  provide  useful
tools for exploring the possibilities of computer-aided exposition.





  LINGUISTIC CONSTRAINT PROCESSING FOR SPEECH RECOGNITION
  H. Meloni, (GIA, Faculte de Luminy, Marseille, France).
  Tech. and Sci.  Inf.  (France),  vol.2,  no.5,  p.327-40 (1983).
 
  Coden: TTSIDJ  ISSN: 0752-4072
  Trans in: TECHNOL. AND SCI. INF. (GB)   ISSN: 0264-7419
  Treatment: PRACTICAL
  Document Type: JOURNAL PAPER
  Languages: ENGLISH
  (42 Refs)

  Although the speech  recognition  products  currently  available  on  the
market  use  mainly  pattern  recognition and engineering techniques,  real
man-machine oral dialogue systems  need  to  be  designed  by  the  use  of
advanced methods drawn from the study of artificial intelligence,  in order
to incorporate,  in particular,  linguistic  information  processing.   The
author   uses  a  formalism  derived  from  logic  programming  techniques:
programmable strategy  grammars  (PSG).   In  particular,   this  formalism
facilitates  the  description of appropriate linguistic constraints and the
strategies required to make use of them.





  RATIONAL SET OF TREES AND THE ALGEBRAIC SEMANTICS OF LOGIC PROGRAMMIMG 
  G. Marque-Pucheu  (Ecole Normale Superieure, Paris, France).
  Acta  Inf.   (Germany),  vol.20, no.3, p.249-60 (1983).

  Call no. in York Univ. Library: QA76.A26V.20 
  Coden: AINFA2  ISSN: 0001-5903
  Treatment: THEORETICAL
  Document Type: JOURNAL PAPER
  Languages: ENGLISH
  (14 Refs)

  This paper presents a new  semantics  for  logic  programming  (algebraic
semantics),   which  defines  the  computation  of  a  logic program as the
solution of a system of tree equations.  These equations are solved  for  a
particular class of logic programs and the solutions of these equations are
shown to be rational sets of trees.





  PROCEEDINGS  COMPCON  83  FALL:   Delivering computer power to end users.
  Twenty-Seventh IEEE Computer Society International Conference 
  25-29 Sept.  1983   Arlington, VA, USA.

  Publ: IEEE COMPUTER SOC. PRESS,    SILVER SPRING, MD, USA
  Treatment: APPLIC; PRACTICAL
  Document Type: CONFERENCE PROCEEDINGS
  Languages: ENGLISH

  The following topics are dealt with:  local area  networks;   distributed
processing;    satellite   data   networks;    university   computing   and
communications;   digital  PB;    voice/data;    micro-operating   systems;
human-computer   interaction;    computer  vision;   network  modeling  and
performance;  computer communications;  robotics;  video  teleconferencing;
videotex;  microprocessor system and system programming;  data networks and
protocols; local data distribution;  and logic programming.  73 papers were
presented,   of which  72 are published in full in the present proceedings,
and one as abstract only. Abstracts of individual papers can be found under
the relevant classification codes in this or other issues.





  SHAPEUP AND ITS MACHINE ARCHITECTURE, DAWN
  M. Yokota, M. Umemura, (NEC Corp., Tokyo, Japan).
  NEC Res.  and Dev.  (Japan)    no.71, p.40-7, (Oct.  1983).

  Coden: NECRAU   ISSN: 0547-051X
  Treatment: NEW DEVELOPMENTS; PRACTICAL
  Document Type: JOURNAL PAPER
  Languages: ENGLISH
  (13 Refs)

  The authors propose a new programming language, ShapeUp  and  its  machine
architecture, DAWN. ShapeUp is a logic programming language based on PROLOG.
PROLOG,   with  its  automatic  inference  mechanisms,   provides  some new
concepts,  usable in future  computer  applications,   such  as  artificial
intelligence  and  other  intelligent  processing  fields.   ShapeUp  is an
extended version of PROLOG, advanced in character pattern matching features
and in  some  other  practical  facilities.   DAWN  is  a  special  machine
architecture  for  ShapeUp,   which  creates  a  new intelligent processing
environment as an interactive personally usable machine.





  REAL-TIME FUNCTIONAL QUEUE OPERATIONS USING THE LOGICAL VARIABLE
  W. F. Clocksin,  (Univ. of Oxford, Oxford, England).
  Inf. Process. Lett. (Netherlands),  vol.17, no.4, p.173-5 (8 NOV. 1983).

  Call no. in York Univ. Library: QA76.I47V.17 (Information Processing 
                                  Letter Vol. 17)
  Coden: IFPLAT   ISSN: 0020-0190
  U. S. Copyright Clearance Center Code: 0020-0190/83/$3.00
  Treatment: THEORETICAL
  Document Type: JOURNAL PAPER
  Languages: ENGLISH
  (4 Refs)

  The logical variable,  a  device  available  to  practitioners  of  logic
programming,   permits  a  very  simple  functional implementation of queue
operations. No reversals or copying are required, and at most two cases are
performed per operation. By criteria given by Hood and Melville(1981), This
would constitute a real-time implementation.  In logic  programming,   data
structures   (terms)   may  contain  logical  variables  which  may  become
instantiated  to  terms  as  a  result  of  the   unification   of   terms.
Instantiating  a  variable is not a side-effect but a binding which is made
during  unification  and  undone  on  backtracking.   If  a   variable   is
instantiated to another variable, then they share subsequent instantiations
to either.




  APPLICATIONS   SOFTWARE   AND   ORGANIZATIONAL  CHANGE:   ISSUES  IN  THE
  REPRESENTATION OF KNOWLEDGE
  R.M. LEE, (Internat. Inst. for Appl. Systems Analysis, Laxenburg, Austria)
  Inf. Syst.  (GB),   vol.8, no.3, p.187-94, (1983  ).

  Coden: INSYD6   ISSN: 0306-4379
  U. S. Copyright Clearance Center Code: 0306-4379/83/$3.00+.00
  Treatment: THEORETICAL
  Document Type: JOURNAL PAPER
  Languages: ENGLISH
  (14 Refs)

  Information systems, while contributing to organizational efficiency, may
at  the  same time constrain organizational adaptibility.  The high cost of
system modification is related to a broader problem:  the 'transportability
of knowledge' as represented in computer programs.   Alternatives  based on
logic programming, are suggested.




  EXPERT SYSTEMS AND LOGIC PROGRAMMING FOR CAD
  P. W. Horstmann,  (Dept. of Electrical Engng., Syracuse Univ.,
  East Fishkill, NY, USA).
  VLSI Des. (USA), vol.4, no.7, p.37-40, 43, 46 (NOV. 1983).

  Coden: VDESDP   ISSN: 0279-2834
  Treatment: GENERAL,REVIEW
  Document Type: JOURNAL PAPER
  Languages: ENGLISH
  (12 Refs)

  Work  at  Syracuse  has  been  oriented toward using logic programming to
solve some basic  VLSI  design  problems,   in  the  areas  of  design  for
testability (DFT),  functional simulation,  fault diagnosis,  and automatic
test generation.  To this end,  the author has developed logic programs for
the  latter  three  areas,   and  a rudimentary expert system for DFT.  The
article describes the elements  of  the  expert  system  and  explains  the
approach  used  by  the PROLOG programming language,  as implemented in the
research at Syracuse University (Horstmann, October 1983).


  Title          :  Contributions To The Theory Of Logic Programming
  Authors        :  Apt, K.R.; Van Emden, M.H.
                 :  Erasmus Univ. Rotterdam, Rotterdam, Netherlands
  Journal	 :  J.   ASSOC.   COMPUT.  MACH.  (USA)    
  		 :  VOL.29,  NO.3   841-62   JULY 1982

  Call  No.      :  QA 76 A75     ( Steacie Library )
  
  Treatment      :  Theoretical
  Document Type  :  Journal paper
  Languages      :  English
  (19 Refs)
  
  Horn clauses  of  first-order  predicate  logic  can  be  regarded  as  a
high-level  programming  language  when  SLD-resolution,  a special-purpose
resolution theorem prover,  is used as an interpreter.  Consequently,   the
semantics  of  Horn  clauses  can  be  studied  both by model-theoretic and
fixed point methods (in the sense of Scott).  This possibility is exploited by
identifying  the least (greatest)  fixed point with a least (greatest)  model.
Successful  termination  of  SLD-resolution  is  characterised   by   least
fixed points.  A semantic characterisation of finite failure of SLD-resolution
is given,  which coincides with the greatest fixed point only  for  a  special
case  of  clauses.  It is shown that non-deterministic flow chart schemata of
bounded non-determinism are modelled by this special case;   the  connection
between  finite  failure  and  greatest  fixed point  is  then used to give a
semantic characterisation of termination,  blocking,  and non-termination of
such flow chart schemata.

=============================================================================

  Title          :    On An Interactive Program Verifier For Prolog Programs
  Author         :    Balogh, K.
  From           :    Nim Iguszi, Budapest, Hungary
  Journal        :    Domolki, B,; Gergely, T. 
                      Mathematical logic in computer science.  
                      Colloquium on mathematical logic in programming .
                      page 111-142      1981  
                      10 th to 15 th , Sept. 1978 
                      Salgotarjan, Hungary
  Call   no.     :    QA 76  M352    ( Steacie Library ) 
  Publisher      :    North-Holland,  Amsterdam, Netherlands
  
  ISBN           :    0-444-85440-1
  Treatment      :    Practical and experimental
  Document Type  :    Conference paper
  Languages      :    English
  (17 Refs)

  The report deals with some  problems  and  solutions  connected  with  an
experimental program verification system for proving semantic properties of
predicate logic programs .


=============================================================================

  Title        :   Translating Spanish Into Logic Through Logic
  Author       :   DAHL, V.
                   Dept. of Math., Univ. of Buenos Aires, 
                   BUENOS AIRES, ARGENTINA
  Journal      :   AM. J.  Comput.  Ling.  (U.S.A.)    
                   Vol.7 ,  NO.3   page 149-164  
                   JULY-SEPT.  1981
  Call   No.   :   P 98 A 52         ( Scott Library )
  Treatment    :   Practical and theoretical .
  Document Type:   Journal paper
  Languages    :   English
  (35 Refs)

  The use of logic for natural  language  (NL)   processing,   both  as  an
internal  query  language  and  as a programming tool,  is discussed.  Some
extensions of standard predicate calculus are motivated  by  the  first  of
these  roles.   A  logical  system including these extensions is informally
described.  It incorporates semantic as well as syntactic NL features,  and
its  semantics  in  a  given  interpretation (or data base)  determines the
answer-extraction process.  A logic-programmed  analyst  which  translates
Spanish  into this system is also presented.  It equates semantic agreement
with syntactic well-formed,  and can  detect  certain  presuppositions,
resolve certain ambiguities and reflect relations among sets.

=============================================================================
  
  Title      :  The Semantics of Parallelism and Co-routining in 
		Logic Programming
  Authors    :  Pereira, I.M.; Monteiro, I.F.
                Dept. de Informatica, Univ. Nova de Lisboa, Lisboa, Portugal
  Journal    :  Domolki, B,; Gergely, T. (Editors)
                Mathematical Logic In Computer Science.
                Colloquium On Mathematical Logic In Programming   
                Page 611-657   1981
                10-15 SEPT. 1978   
                Salgotarjan, Hungary
  Call No.     :  QA 76 M 352           ( Steacie Library )
  Publisher    :  North-Holland,  Amsterdam, Netherlands
  ISBN         :  0-444-85440-1
  Treatment    :  Theoretical
  Document Type:  Conference paper
  Languages    :  English
  (14 Refs)

  Begins with an introduction to a simple but  powerful  logic  programming
language  called  Prolog,   in  order  to  provide  a  rigorous  context of
presentation of ideas and results.  Next the authors present definitions of
sequential,   parallel and co-routine executions of programs,  in strictly
logic programming  terms,   and  go  on  to  define  in  logic  a  parallel
interpreter for logic programs, obtained by a simple program transformation
from   a  purely  sequential  interpreter.   They  then  show  how  similar
transformations may be directly applied to programs  to  obtain  transforms
that  achieve  parallelism  or  co-routining  without  recourse  to a special
interpreter. Afterwards, they apply the results to data base look-up and to
problems arising from the use of negation as non-derivation,  and  suggest
the basis of a rudimentary control language for logic programs.

===================================================================================================

  Title         : "Intelligent back tracking For An Interpreter Of" 
                           "Horn Clause Logic Programs"

  Author        :  Bruynooghe, M.
                   Appl. Maths. and Programming Div., 
                   Katholieke Univ., Leuven, Belgium
                   Domolki, B,; Gergely, T. (Editors)

  Journal       :  Mathematical logic in computer science.  
                   Colloquium on Mathematical Logic in Programming   
                   page 215-258   1981
                   10-15 SEPT. 1978   Salgotarjan, Hungary

  Call  no.     :  QA 76 M 352          ( Steacie Library )
  
  Publisher     :  North-Holland,  Amsterdam, Netherlands
  
  ISBN          :  0-444-85440-1
  
  Treatment     :  Theoretical

  Document Type :  Conference paper

  Languages     :  English
  (7 Refs)



  An interpreter of Horn clause logic programs is given  a  goal  statement
             <-A/SUB 1/, A/SUB 2/, >, A/SUB N/,  (N>1)  
And a set of Horn clauses on the form
              B-B/SUB 1/,  >,  B/SUB M/  (M>O)  
and attempts to derive a sequence of goal  statements  ending in the  empty
goal statement.  this paper defines a partial ordering over the   different
steps in a  derivation.   This  partial ordering  allows one to find a goal
statement that cannot be insolvable for the same reasons as the current one
('back track point')


====================================================================================================




  Title          :  A Semantic Theory for Logic Programming
  
  Author         :  Brown, F.M.
                    Dept. of Artificial Intelligence, Univ. of Edinburgh, 
                    Edinburgh, Scotland

  Journal        :  Domolki, B,; Gergely, T. (Editors)
                    Mathematical logic in computer science.  
                    Colloquium on mathematical logic in programming   
                    page 195-213   1981
                    10-15 SEPT. 1978   Salgotarjan, Hungary

  Call no.       :  QA 76 M 352       ( Steacie Library )

  Publisher      :  North-Holland, Amsterdam, Netherlands
  
  ISBN           :  0-444-85440-1

  Treatment      :  Theoretical

  Document Type  :  Conference paper

  Languages      :  English
  (10 Refs)

  axiomatic a number of meta theoretic concepts which have been  used  in
logic  programming,   including:   meaning,  logical truth,  non-entailment,
assertion and erasure,  thus showing that these  concepts  are  logical  in
nature  and  need  not  be  defined as they have previously been defined in
terms of the operations of any particular interpreter for logic programs.


=================================================================================================



  Title           : Many-Sorted Logic Based Programming Language

  Author          : David, G.; Sarkozy, A.
                    Computer and Automation Inst., 
                    Hungarian Acad. of Sci., Budapest, Hungary
  
  Journal         : Domolki, B,; Gergely, T. (Editors)
                    Mathematical logic in computer science.  
                    Colloquium on mathematical logic in programming   
                    Page 303-319   1981
                    10-15 SEPT. 1978   Salgotarjan, Hungary

  Call no         : QA 76 M 352       ( Steacie Library )
  
  Publisher       : North-Holland, Amsterdam, Netherlands
     
  ISBN            : 0-444-85440-1

  Treatment       : Theoretical

  Document Type   : Conference paper

  Languages       : English
  (9 Refs)



  The authors wished to describe,  specify,  and prove correctness  and  to
synthesize  sequential or parallel programs,  especially micro programs.  In
order to describe a computer  system  which  executes  the  program  to  be
proved,   one  needs  tools to reflect the inhomogeneous data structures of
computer  systems  and  the  same  of  programs,   as  well  as   for   the
transformations (i.e. instructions, functions) defined on them. Because the
typical  data  structures  are  both  homogenous  (vectors,   arrays)   and
inhomogeneous ones they had to choose a many-sorted logic  as  a  base  for
further extension as a programming language. Many-sorted logic was modified
for logic programming purposes .


==================================================================================================



  Title             :  Logic programming: 
                       A Computing Tool for the Architect of the Future

  Author            :  Swinson, P.S.G.
                       Dept. of Architecture, Univ. of Edinburgh, 
                       Edinburgh, Scotland

  Journal           :  Comput.  Aided Des.  (GB)    VOL.14,  NO.2   
                       page 97-104   MARCH 1982 

  Call  no          :  TA 174 C 58        ( Steacie Library )

  Treatment         :  Practical

  Document Type     :  Journal paper

  Languages         :  English
  (26 Refs)


  Computer-aided architectural design is reviewed with particular reference
to new software techniques that are becoming available.  The needs  of  the
designer  are  examined  leading to a specification for the computing tools
that may service  architects  in  the  future.   The  author  concludes  by
reporting on the results of early studies into one radically new technique:
logic programming.


  The control facilities of IC-Prolog
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Authors   : Clark, K. L.      { Dept. of Computing and Control, }
              Mccabe, F. G.     { Imperial Coll., London, England }
  Editors   : Michie, D.        
  Title     : Expert systems in the micro-electronic age, 
              page 122-149, July 1979, Edinburgh, Scotland.
  ISBN      : 0 85224 381 2

  Publisher     : Edinburgh University Press,
                  Edinburgh, Scotland.
  Treatment     : Theoretical
  Document type : Conference paper
  Languages     : English
  Call number   : QA 76.24E88


  The most significant difference between IC-Prolog and  the  other  Prolog
implementations is the ability of the programmer to control the computation
using program annotations.  In this paper, the authors exemplify the use of
these annotations and give them a precise semantics.







  Prolog on the DECsystem-10
  ~~~~~~~~~~~~~~~~~~~~~~~~~~

  Author  : Warren, D.       { Edinburgh University, Scotland }
  Editors : Michie, D.       
  Title   : Expert systems in the micro-electronic age,
            page 112-121, July 1979, Edinburgh, Scotland.
  ISBN    : 0 85224 381 2

  Publisher     : Edinburgh University Press,    
                  Edinburgh, Scotland
  Treatment     : Application, theoretical
  Document type : Conference paper
  Languages     : English
  Call number   : QA 76.24E88
  

  The basic idea of Prolog is that a collection of logic  statements  of  a
restricted  form-clauses can  be  regarded as a program.   In addition, the
execution of such a program is nothing other  than  a  suitably  controlled
logical deduction from the clauses forming the program.







  Definite Clause Grammars for language analysis --
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  (A survey of the formalism and a comparison with augmented transition 
   networks)

  Author  : Pereira, F. C. N.      { Dept of Artificial Intelligence,  }
            Warren,  D. H. D.      { University of Edinburgh, Scotland }
  Title   : Artificial Intelligence (Netherlands)   
            Volume 13, No.3, page 231-278, May 1980   

  Treatment     : Theoretical
  Document type : Journal paper
  Languages     : English
  Call Number   : Q 335.A785
  

  A clear and powerful formalism for describing languages, both natural and
artificial,   follows from a method for expressing grammars in logic due to
Colmerauer and Kowalski.  This formalism,  which is a natural extension  of
context-free  grammars is called 'Definite Clause Grammars'  (DCGS).  A DCG
provides not only a description of a language,  but also an effective means
for analysing strings of that language, since the DCG, as it stands,  is an
executable program of the programming language Prolog.   Using  a  standard
Prolog  compiler,   the DCG can be compiled into efficient code,  making it
feasible to implement practical language analysers directly as  DCGS.   The
authors  compare  DCGS  with  the  successful  and  widely  used  augmented
transition network  (ATN)   formalism,   and  indicates  how  ATNS  can  be
translated  into DCGS.  It is argued that DCGS can be at least as efficient
as ATNS, whilst the DCG formalism is clearer,  more concise and in practice
more powerful.







  Relational programming illustrated by a program for the Game of Mastermind
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Author    : Van Emden, M. H.     { Department of Computer Science, }
                                   { University of Waterloo, Canada  }
  Reference : Computer Linguistic And Computer Languages  (Hungary)    
              No.13, page 131-50, 1979

  Treatment     : Practical
  Document Type : Journal paper
  Languages     : English
  Call  number  : Not available at York University

  
  Many  difficulties  in  programming  are  caused by the use of imperative
languages (those which are based on commands)  such as Fortran,  Algol,  or
Pascal.  These difficulties can be avoided by using a definitional language
as Lisp or Prolog.  Lisp is based on the lambda  calculus and is typically
used  for  the  definition  of  functions.   Prolog is based on first-order
predicate logic and is typically used for the definition of relations. This
paper aims to show an advantage of  specifying  a  relation  instead  of  a
function (The same  relation can  specify  several different functions, de-
pending on which arguments are given).  As a result, the Prolog interpreter
can use the relational specification to compute several  of  the  different
functions implied in the relation.  Several examples of this phenomenon are
exhibited and discussed.







  Teleprinter option unites Prom Programmer to MC6800
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Authors : Padmanabhan, J.        { O/E/N India Ltd.            }
            Swaminathan, M. S.     { Mulanthurthy, Cochin, India }
  Title   : Electronics  (USA), Volumn 52,  No.18,    
            page 157 and 159,  Aug 30, 1979   

  Treatment     : Practical
  Document type : Journal paper
  Languages     : English
  Call number   : Not available at York University


  A simple way to unite the MC6800 microprocessor  system  to  the  popular
Prolog Series 90 Prom Programmer is given, this modified teleprinter option
and appropriate software provide an economical way to transfer large blocks
of data rapidly. The 9102 option was designed to link the computer bus to a
teleprinter  through  a  20-MilliAmpere current loop.  In cases where it is
used,  it will offer an operator at a teleprinter console a convenient  way
to enter spot commands or data into a microprocessor or other devices.  The
data  is  transferred  from  the  6800  to  the  programmer   through   the
teletypewriter  interface  via  an  asynchronous  communications  interface
adapter.  The data transfer is controlled by the user at a console with the
aid of suitable software.







  The application of Prolog to the development of QA and DBM systems
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Authors : Futo, I.          { Nim Iguszi, Budapest, Hungary }
            Darvas, F.
            Szeredi, P.
  Editors : Gallaire, H.
            Minker, J. 
  Title   : Logic and Data Bases   
            page 347-376,   1978
            Nov. 1977, Toulouse, France
  ISBN    : 0 306 40060 X

  Publisher     : Plenum,    New York, USA 
  Treatment     : Application, theoretical
  Document type : Conference paper
  Languages     : English
  Call number   : QA 76.9D3S97  1977

  
  Experience gained in the development of question-answering (QA)  and data
base management (DBM)   systems  using  a  logic-based,   very  high  level
language, Prolog,  is summarized.  The Prolog language is introduced first.
Those modifications to the language that were  necessitated  by  the  above
applications are described. Subsequently, an experimental QA system dealing
with  drug  data  and drug interactions,  and two operative DBM systems are
described. Finally, some advantages obtained in using Prolog for QA and DBM
system implementations are discussed,  and continued developments of Prolog
are presented.







  Nondeterministic Languages used for the definition of data models
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Authors : Colombetti, M.     { Milan Polytech.                  }
            Paolini, P.        { Artificial Intelligence Projects }
            Pelagatti, G.      { Politecnico Di Milano, Italy     }
  Editors : Gallaire, H.       
            Minker, j. 
  Title   : Logic and Data Bases 
            page 237-257,   1978
            Nov. 1977, Toulouse, France
  ISBN    : 0 306 40060 X

  Publisher     : Plenum,    New York, USA 
  Treatment     : Theoretical
  Document type : Conference paper
  Languages     : English
  Call number   : QA 76.9D3S97 1977

  
  Data models have played an important role in the  data  base  field.   In
recent years, discussion has focused on the comparison between several data
models which have been proposed (relational, hierarchical, networks, etc.).
Following the algebraic approach to the definition of abstract data  types,
a  data  model  can be described by its signature (set of typed operations)
and its presentation (set of algebraic equations).  It is possible to write
such  equations  in  such  a  way  that  they  can  be  viewed as recursive
definitions of the operations on terms.   It  is  then  straightforward  to
derive an implementation of the data model described by the equations using
a predicate logic-based language such as Prolog.







  Metamorphosis Grammars
  ~~~~~~~~~~~~~~~~~~~~~~

  Author  : Colmerauer, A.      { Univ. D'Aix-Marseille II, } 
                                { Marseille, France         }
  Editors : Bolc, L. 
  Title   : Natural Language Communication With Computers
            page 133-189,   1978
  ISBN    : 3 540 08911 X

  Publisher     : Springer-Verlag,    Berlin, Germany
  Treatment     : application, theoretical
  Document type : book chapter
  Languages     : English
  Call number   : QA 76.9I58N37

  
  The  author  presents some very general grammars in which each re-writing
rule is of the type:  'Replace such and such sequence of trees by such  and
such  another  sequence  of trees'.  Within the framework of programming in
first-order logic,  he proposes axioms for  these  grammars  which  produce
efficient parsing and syntheses algorithms.  He illustrates his work by the
programming-language Prolog and by two important examples:   writing  of  a


    ----  FILE STRUCTURES, PROGRAM STRUCTURES, AND ATTRIBUTED GRAMMARS ----

    From         : Dept. Of Computer Sci., Univ. Of Ottawa, Ottawa, Ontario
    Journal name : Ieee Trans.  Software Eng.  (USA)  Vol.SE-9, 
                   No.3   260-6   May 1983
    Treatment    : Practical
    Document Type: Journal Paper
    Languages    : English
    Call number  :   QA 76.6 I 17

    (18 Refs)
         A language for defining sequential file structures, characterized as
    nested  sequences  of  records  having  in common certain keys and  types
    is presented.  'input schemata'  are defined as  program  skeletons  that 
    contain all  the necessary control structure to process a specified file.
    A method for obtaining  an  input  schema  from  the  corresponding  file
    structure definition  is  given.   The  method  is  based  on  attributed 
    grammar,   and has been implemented in the programming  language  Prolog.
    This  constitutes  a formalization of some aspects of  the  data-directed
    program design method  of  Jackson  and  Warnier  (1975).    Examples  of
    applications of this method to business  data  processing  problems  such
    as  file  updating  and  report generation are given.

    =========================================================================

           ----- AUTOMATED ANALYSIS OF INSTRUCTIONAL TEXT -----
                           By Norton, L.M.

    From          : Lab.  Of  Statistical  and Math. Methodology, 
                    Nat. Inst. Of Health,  Bethesda, MD, USA
    Journal name  : Artif. Intell. (Netherlands) Vol.20, NO.3 307-44  May 1983
    Treatment     : Theoretical.
    Document Type : Journal Papers.
    Languages     : English.
    Call number   : Q335. A785
 
    (12 Refs)
          The development of a capability for automated processing of natural
    language text is a long-range  goal  of  artificial  intelligence.   This  
    paper  discusses  an  investigation  into  the  issues  involved  in  the 
    comprehension  of  descriptive, as   opposed   to  illustrative,  textual
    material.  The comprehension process  is  viewed  as  the  conversion  of  
    knowledge  from  one representation  into  another. The  proposed  target 
    representation consists of statements   of  the  Prolog  language,  which
    can  be  interpreted  both declaratively  and  procedurally,   much  like
    production  rules.   A  computer program  has been written  to  model  in 
    detail some ideas about this process.
    The program  successfully  analyzes  several  heavily  edited  paragraphs
    adapted   from  an  elementary  textbook  on  programming,  automatically
    synthesizing as a result of the analysis a working Prolog program  which,
    when executed,  can  parse  and  interpret  LET  commands  in  the  Basic
    language. The paper discusses the  motivations  and  philosophy  of   the 
    project, the  many  kinds  of prerequisite knowledge which are necessary,
    and the structure of the  text analysis  program. A  sentence-by-sentence 
    account of the analysis of the sample text is presented,  describing  the
    syntactic and semantic processing which  is  involved.  The paper  closes
    with  a  discussion  of  lessons  learned  from  the  project,   possible
    alternative approaches,  and possible extensions for  future  work.  
    The entire  project is  presented  as  illustrative  of  the  nature  and
    complexity  of  the  text  analysis  process,   rather  than as providing
    definitive or optimal solutions to any aspects of the task.

    =========================================================================

                         -----  A STUDY OF PROLOG -----
                                 By Gallaire, H.

    From       :  Lab. De Marcoussis, Cge, Marcoussis, France
                  Biermann, A.W. ; Guiho, G. 
    Journal name :Computer  Program  Synthesis  Methodologies. 
                  Proceedings Of The Nato Advanced Study Institute 173-212 1983
                  28 Sept.-10 Oct. 1981   Bonas, France
    Publisher  :  Reidel,    Dordrecht, Netherlands
    ISBN       :  90 277 1504 1
    Treatment  :  Bibliography ; Practical
    Document Type: Conference paper
    Languages  :  English
    Call number:  Not available at York Libraries.

    (60 Refs)
             This article gives an overview of Prolog,  both as a programming 
    language and as a tool for some applications in automatic programming.
    The following topics were dealt with:  Program transformations;  Sorting;
    automatic  programming; Concurrent  programs;  Very high level languages;
    Program  design;   Programming  theory;   Prolog   and   natural language
    programming.Ten papers were presented, all of which are published in full
    in the present proceedings.  Abstracts of individual papers  can be found
    under the relevant classification codes in this or future issues.

    ==========================================================================

       ----  AN ALGORITHM TRANSLATING RECURSIVE PROGRAMS INTO HORN SETS ----
                   By  Kishi, T.  ; Yamasaki, S. ;  Doshita, S.

    From          : Faculty Of Eng., kyoto Univ., kyoto, Japan
    Journal name  : Trans. Inst. Electron. and Commun. Eng. Jpn. 
                    Sect. E (Japan) Vol.E65,
                    No.11 703   Nov. 1982 
    Treatment     : Theoretical
    Document Type : Journal paper
    Languages     : English
    Call number   : Not available at York Libraries.

    Summary form only given,  as  follows.  In  a  programming  system  Prolog,
    proposed  by  R.  kowalski,  the horn set of clauses is a program,  and the
    refutation of the horn set can be regarded as its computation.  The authors
    provide  an  algorithm  by  which one can construct the horn set of clauses
    from a given recursive program such that the computation of  the  horn  set
    simulates that of the recursive program by fix point computation rules. The
    parallel-outermost rule is chosen as a fix point computation rule. The horn
    set is obtained to express the computation of recursive programs.

    ===========================================================================

           ----  LOW-POWER DATA LOGGER USES CMOS MEMORY AND MUP ----
                            By  Donnelly, B.

    Journal name :  Electron. Ind.  (GB)    Vol.9,  No.2   9-13   Feb.  1983  
    Treatment    :  Practical; Experimental
    Document Type:  Journal paper
    Languages    :  English
    Call number  :  Not available at York Libraries.

    The first such unit from micro-data  was  Prolog,   now  well  established.
    Available   in   an  environmentally  sealed  enclosure,   and  using  high
    reliability connectors,  sound mechanical construction  and  a  DC300  tape
    drive  designed  and  built  in-house,   these units have proved themselves
    reliable in a wide range of applications.  However,  for some applications,
    the  Prolog  may be considered to be an over kill, and it was felt that the
    price tag of >5/sup 1///sub 2/k might prevent some users from being able to
    benefit from the built-in intelligence. For this reason the Prolog has been
    developed,   housed  in  a  standard  instrument case and using solid state
    memories.  This system provides many of the advantages of Prolog,  uses the
    same  extensive family of input cards common to the range,  and has a price
    of only >3/sup 1///sub 2/k.



TITLE : AN EASY IMPLEMENTATION OF PIL (PROLOG IN LISP)
AUTHOR: WALLACE, R.S.
          DEPT. OF COMPUTER SCI., UNIV. OF MARYLAND, COLLEGE PARK, MD, USA
JOURNAL : SIGART NEWSL. (USA)    NO.85   29-32   JULY  1983
CALL NUMBER : BF 311 .A 75a
CODEN : SINEDU
ISSN : 0163-5719
TREATMENT : APPLIC.
DOCUMENT TYPE : JOURNAL PAPER
LANGUAGE : ENGLISH

  A simple procedure for implementing Prolog in LISP demonstrates that it
is easy to extend LISP to do what Prolog does.



TITLE : LISP AND PROLOG MACHINES ARE PROLIFERATING
AUTHOR : MANUEL, T.
JOURNAL : ELECTRONICS (USA)   VOL.56, NO.22   132-7   3 NOV.  1983
CALL NUMBER : TK 7800 E5V.1-V.57,NO.14R
CODEN : ELECAD
ISSN : 0013-5070
TREATMENT : GENERAL,REVIEW
DOCUMENT TYPE : JOURNAL PAPER
LANGUAGE : ENGLISH

   It discusses the commercial status of artificial intelligence and delves
into  AI hardware systems now  available,  as well as  reporting on several
product-development projects close to fruition around the world.  Prominent
among the latter are projects under way in Japan, reported in detail. These
projects  stem  both  from the fifth-generation computer project  and  from
investigations into artificial intelligence.    New U.S. LISP machines have
been announced, as Japan investigates Prolog and LISP.



TITLE : A VIEW OF THE FIFTH GENERATION AND ITS IMPACT (COMPUTERS)
AUTHOR : WARREN, D.H.D.
          SRI INTERNATIONAL, MENLO PARK, CA, USA
         SCARROTT, G.G. (Editors)
          FIFTH  GENERATION  COMPUTER  PROJECT.   STATE  OF THE ART REPORT
          PP.145-53  1983
PUBL : PERGAMON INFOTECH,    MAIDENHEAD, BERKS., ENGLAND
CALL NUMBER  : QA 76.I48 Ser.11 No.1
TREATMENT : GENERAL,REVIEW
DOCUMENT TYPE : BOOK CHAPTER
LANGUAGE : ENGLISH

     K. Fuchi's paper 'Aiming for knowledge information processing systems'
(see proc. Japanese fifth generation conf.,  Tokyo, Oct. 1981)  is reviewed
in order to explain the reasoning behind the Japanese approach to the fifth
generation.  Information from other sources is also used.   The first three
years of project plan  are discussed  with  reference to progress  reported
from Japan, British and American reactions.  There is a growing interest in
the language Prolog and it has achieved some status in U.S..



TITLE : FIFTH-GENERATION COMPUTERS: FEATURES AND RESEARCH
AUTHOR : SIMONS, G.L.
JOURNAL : SOFTWARE WORLD (GB)   VOL.14,  NO.4   5-9   1983
CALL NUMBER :
CODEN :  SOFWBG
ISSN : 0038-0652
TREATMENT : GENERAL,REVIEW
DOCUMENT TYPE : JOURNAL PAPER
LANGUAGE : ENGLISH

      The article gives profiles of the main features of fifth generation 
computers, associated research, and development projects. It discusses in
depth of the concept of the fifth generation computer.     It describes a
knowledge information processing system (KIP)  and the technology for its
realization.  The main functions of fifth generation machines are broadly
classified under :  problem-solving and inference making; knowledge based
management;  intelligent interfaces.     There are several models for the
structure of fifth generation computers as this article discusses.



TITLE : AN  EFFICIENT  EASILY  ADAPTABLE SYSTEM FOR INTERPRETING 
        NATURAL LANGUAGE QUERIES
AUTHOR : WARREN, D.H.D.; PEREIRA, F.C.N.
            ARTIFICIAL INTELLIGENCE CENTER, SRI INTERNAT., MENLO PARK, CA, USA
JOURNAL : AM. J. COMPUT.  LING.  (USA)  VOL.8,  NO.3-4  110-22  JULY-DEC. 1982
CALL NUMBER :
CODEN : AJCLD9                                                               
ISSN: 0362-613X
DOCUMENT TYPE : JOURNAL PAPER
LANGUAGE : ENGLISH
(24 Refs)

   An overall account of a prototype natural language question answering
system, called CHAT-80, is given.  CHAT-80 has been described to be both
efficient and easily adaptable to a variety of applications.  The system
is implemented entirely in Prolog, a programming language based on logic.
With the aid of a logic-based grammar formalism,  called extraposition
grammars, CHAT-80 translates English questions into the Prolog subset of
the logic.    The resulting logical expression is then transformed by  a  
planning algorithm into efficient Prolog, cf. 'query optimization'  in a 
relational database.  Finally,  the Prolog form is executed to yield the 
answer.      On a domain of world  geography,  most questions within the
English subset are answered in well under one second, including relatively
complex queries.



TITLE : AN ABSTRACT PROLOG MACHINE
AUTHOR : KOMOROWSKI, H.J.
           SOFTWARE SYSTEMS RES. CENTER, LINKOPING UNIV., LINKOPING, SWEDEN
         DEGANO, P.; SANDEWALL, E. (Editors)                                 
SPONSOR: ACM; AFCET; AICA; ET AL
         INTEGRATED  INTERACTIVE  COMPUTING  SYSTEMS.  PROCEEDINGS OF THE
         EUROPEAN CONFERENCE, ECICS 82   183-91   1983
         1-3 SEPT. 1982   STRESA, ITALY
PUBL : NORTH-HOLLAND,    AMSTERDAM, NETHERLANDS
CALL NUMBER : QA 76.9I58E96 1982
ISBN : 0 444 86595 0
TREATMENT : PRACTICAL
DOCUMENT TYPE: CONFERENCE PAPER
LANGUAGE : ENGLISH
(16 Refs)

    An abstract Prolog machine is specified in a dialect of Meta-IV.   The
purpose of this specification  is  to provide a formal and implementation-
oriented definition of the Prolog programming language.  The specification
is written in a purely applicative style.  Due to a good modularity, it is
possible to identify main issues in implementing Prolog. The specification
has been used elsewhere for a rigorous implementation of an interpreter of 
the language,  for  a  formal  description  and  implementation of partial 
evaluation transformations,   a  specification of interactive programmer's 
tools (e.g. break, trace), and served as a standard for proving correctness 
of a compiler.  It can be also further refined toward improved efficiency.



TITLE : HOW COMPLETE ARE KNOWLEDGE-REPRESENTATION SYSTEMS?
AUTHOR : ELCOCK, E.W.
             DEPT. OF COMPUTER SCI., UNIV. OF WESTERN ONTARIO, LONDON,
             ONTARIO, CANADA
JOURNAL : COMPUTER  (USA)     VOL.16,  NO.10   114-18   OCT.  1983
CALL NUMBER : TK 7885 A1 C6 V.3 NO.5
CODEN : CPTRB4
ISSN : 0018-9162
U. S. COPYRIGHT CLEARANCE CENTER CODE : 0018-9162/83/1000-0114$01.00
TREATMENT : PRACTICAL
DOCUMENT TYPE : JOURNAL PAPER
LANGUAGE : ENGLISH
(10 Refs)

  The issue of completeness of  resolution-based  systems  is  explored  by
comparing Prolog, the most feasible of the first-order systems, with Absys,
an  assertive  programming  system  developed  in 1968.  The incompleteness
resulting from any serious use of Prolog as a vehicle for a knowledge-based
system is addressed.  It is shown that a central issue for Prolog (and  for
other first-order logic systems)  as a vehicle for knowledge representation
and use is the dynamic aggregation and selection of  appropriate  relations
for elaboration.



TITLE : A MULTI-PURPOSE PROGRAM DEVELOPMENT ENVIRONMENT
AUTHOR : HARDY, S.; SLOMAN, A.
           SCHOOL OF SOCIAL SCI., UNIV. OF SUSSEX, BRIGHTON, ENGLAND
JOURNAL : MICROPROCESS. SOFTWARE Q. (GB)   NO.12   22-6   AUG. 1983
CALL NUMBER :
CODEN : MSQUDT
ISSN : 0264-553X
TREATMENT : PRACTICAL
DOCUMENT TYPE : JOURNAL PAPER
LANGUAGE : ENGLISH
(4 Refs)

    Prolog is more than just a programming language ;  it is a programming
development environment.  The core language is  Pop-II  and  a  version  of
Prolog. Pop-II provides many of the features of LISP.  The author discusses
the value of Prolog outside  of  AI  programming  because  of  the  greatly
reduced programming time required.



TITLE : BASIC OR PROLOG: CHOOSING THE RIGHT LANGUAGE FOR A BIOLOGY TEACHING
                         TASK
AUTHOR : TALLON,B; BALL,O.; TOMLEY,O.
JOURNAL : GATEWAY SIXTH FORM COLL., LEICESTER, ENGLAND
       COMPUT.   SCH.  (GB)    VOL.5,  NO.1   21-3   OCT.  1982
CALL NUMBER :
CODEN : COSCEI
ISSN : 0263-0982
TREATMENT : GENERAL,REVIEW; PRACTICAL
DOCUMENT TYPE : JOURNAL PAPER
LANGUAGE : ENGLISH

  Microcomputers can be used in many different ways  to  support  teaching,
and software therefore needs to be carefully chosen so that it enhances the
approach  which  the  teacher  wishes  to  use.  Content,  purpose,  scope,
flexibility,  style,  clarity,  and robustness are  all  attributes  to  be
considered  when  evaluating  software intended for the classroom.  What is
perhaps less obvious is that it is sometimes useful to consider what is the
best language to use for a particular  purpose.   Choice  of  language  can
dramatically  affect  the  content  of  teaching,   the teaching approaches
adopted,  and the type of learning which ensues.  This article compares the
virtues of using Basic or Prolog for a biology teaching task.



TITLE : END-USER  TOUCH  SEARCHING  FOR  CANCER  THERAPY LITERATURE:
	A RULE-BASED APPROACH
AUTHOR : POLLITT, A.S.
               DEPT. OF COMPUTER STUDIES AND MATH., HUDDERSFIELD POLYTECH.,
               HUDDERSFIELD, ENGLAND
         KUEHN, J.J. (Editors)
               PROCEEDINGS OF THE SIXTH ANNUAL INTERNATIONAL ACM SIGIR 
               CONFERENCE ON RESEARCH AND DEVELOPMENT IN INFORMATION RETRIEVAL
               PP.136-45  6-8 JUNE 1983   BETHESDA, MD, USA
PUBL : ACM,    BALTIMORE, MD, USA
CALL NUMBER :
ISSN : 0 89791 107 5
TREATMENT : PRACTICAL
DOCUMENT TYPE : CONFERENCE PAPER
LANGUAGE : ENGLISH
  (24 Refs)

  This paper reviews work towards building an expert system  for  searching
the cancer therapy literature on medicine.  A modified subset of the medical
subject headings (Mesh)  has been stored on a micro-computer  and  accessed
via  a  touch  terminal.   Searches,   previously requested of the oncology
information service at the University of Leeds,  have been used to test out
the  principle  of  end  user  searching  and the results compared with the
searching expertise of a Medlars indexer.  Original program development was
in Pascal, but a rule-based approach,  which is independent of a particular
programming language,   has  been  developed  for  search  term  and  frame
selection  adopting  a  blackboard  philosophy  in  tracing  the process of
selection.  Work is progressing  on  an  implementation  using  the  expert
systems  programming language Prolog,  which has been found a very suitable
language for representing rules and provides a ready made rule interpreter.  
It is suggested that this  approach  is  superior  in  terms  of  retrieval
performance  compared  with  alternative  approaches  to end-user searching
which fail to exhibit detailed knowledge regarding the  subject  matter  of
the search.

  Computer Aided Planning of Robotic Assembly.
  Nof, S.Y.
  Purdue Univ., West Lafayette, In, USA
  Sponsor: ASME. 
  Autofact Europe conference proceedings   2/61-78   1983
  13-15 Sept. 1983   Geneva, Switzerland
  Publ: Soc. Manuf. Eng.,    Dearborn, MI, USA
  380 PP.
  ISBN : 0 87263 123 0
  York Call: N/A.
  Treatment: Practical
  Document Type: Conference Paper
  Languages: English
  (20 Refs)
  Reviews  seven  related  research  projects  on planning robotic assembly
systems under a framework of computer aided facility planning.
(1)  further development  of  RTM,   the robot time and motion method.
(2)  performance evaluation of robotic assembly cells.
(3)  simulation  package  for  robot systems,  Sindecs-R.  
(4)  facility planning with an expert system based on PROLOG.  
(5)  optimal plans  for  bin  picking  and  part  insertion.
(6)  coordination  of assembly cells with cooperating robots.
(7)  economic evaluation of alternative assembly technologies in the 
     woodworking industry.

  System Design Language for the Combination of Data Flow 
    and Control Flows Graphs.
  Heath, F.G.; Foulk, P.W.; Li, D.Y.
  Depts. of Computing and Electrical and Electronic En., Heriot-Watt
  Univ., Edinburgh, Scotland.
  Software and Microsyst. (GB)   Vol.2,  No.6   142-6   Dec.  1983
  Coden: SMICDR
  ISSN: 0261-3182
  York Call: N/A.
  Treatment: Practical
  Document Type: Journal Paper
  Languages: English
  (8 Refs)
  Modular  design  is  one  of  the  key factors in building new-generation
computer systems. Three principal classes of system construction models are
data flow,  control flow and the combination of data flow and control flow.
Based   on   the   project   aids,    the   paper   presents   an  extended
control-flow-data-flow model applying to both software and hardware  system
development,  and then describes the system design language SDL.  This is a
very high-level language,  which provides a natural way for users to design
systems  exploiting  concurrency  for  the  combined  model.  The language,
implemented in PROLOG, is considered to be precise, flexible,  readable and
easy  to  use.   A  case  study  is  given for comparison with the previous
language G.

  Forth, APL, LISP, Modula-2, Smalltalk, PROLOG:  Computer Languages of the
    Future.
  Amsterdam, J.
  Pop. Comput. (USA)   Vol.2, No.11   136-51   Sept. 1983
  ISSN: 0194-8075
  York Call: N/A.
  Treatment: General, Review
  Document Type: Journal Paper
  Languages: English
  Literally thousands of uncommon computer languages exist today,  but  the
author  considers  six  of  the most significant ones:  Forth,  APL,  LISP,
Modula-2, Smalltalk, and PROLOG.  He explains why the usage of these six is
likely to increase in the future.

  CAI System with Natural Language Dialogue.
  Takeuchi, A.; Otsuki, S.
  Univ. Computation Center, Kyushu Univ., Fukuoka, Japan.
  Sponsor: IEEE
  Proceedings  COMPCON  83  Fall:   Delivering Computer Power to End Users.
  Twenty-seventh  IEEE  Computer  Society  International  Conference.
  530-9 Oct. 1983
  25-29 Sept. 1983   Arlington, VA, USA
  Publ: IEEE Computer Soc. Press,    Silver Spring, MD, USA
  ISBN: 0 8186 0492 1
  York Call: N/A.
  Treatment: Practical
  Document Type: Conference Paper.
  Languages: English
  (8 Refs)
  A  description  is  given  of  the  CAI  (computer  assisted instruction)
authoring system and the structure of  the  courseware  it  produces.   The
courseware  has the capability of natural language dialogue.  The method of
natural language  analysis  and  synthesis  is  based  on  definite  clause
grammar.   In  order to manipulate various kinds of knowledge about subject
materials using natural language processing,   the  knowledge  base  has  a
hierarchical multiworlds structure. Inferring rules are expressed in PROLOG.


  Not Only Computing-also Art
  Lansdown, J.
  Comput. Bull. (GB)    Ser.2,  NO.38   12-13   Dec.  1983   
  Coden:  COBUAH 
  ISSN: 0010-4531
  York Call: N/A.
  Treatment: General,Review
  Document Type: Journal Paper
  Languages: English
  The author briefly describes the research work at Sydney University where
PROLOG is used to experiment with expert systems  as  an  aid  to  building
design. This work emphasises the value of computer graphics in architecture.

  PROLOG, Theoretical Principles and Current Trends
  Colmerauer, A.; Kanoui, H.; Van Caneghem, M.
  Era Cnrs, Faculte des Sciences de Luminy, Marseille, France
  Tech.   and Sci.  Inf.  (France)    Vol.2,  No.4   255-92   1983
  Coden: TTSIDJ
  ISSN: 0752-4072
  York Call: N/A.
  Trans in: Technol. and Sci. Inf. (GB)
  ISSN: 0264-7419
  Treatment: General, Review
  Document Type: Journal Paper
  Languages: English
  (16 Refs)
  The success of the Japanese fifth-generation computer project depends  on
PROLOG. However,  no easily accessible reference work exists describing the
major aspects of the language and its underlying concepts.   This  article,
written  by  the  developers of the language,  was prepared for publication
using three brochures on the PROLOG II system, and is intended to fill that
gap.


  The FACT System - A hardware-oriented approach.
  Mc Gregor, D.R.; Malone, J.R.
  Univ. of Strathclyde, Glasgow, Scotland
  King, P.J.H. (Editors)
  DBMSS - A Technical Comparison. State of the Art Report   99-112   1983
  Publ: Pergamon Infotech,    Maidenhead, Berks., England
  York Call: QA 76.I48 ser.11 no.5
  Treatment: Practical
  Document Type: Book chapter
  Languages: English
  The  limitations  of  current  processing  methods  are discussed,  and a
conceptual model for a new database architecture,   the  FACT  System, is
described   in   detail.    Areas  of  difficulty  and  new  prospects  for
implementation of such a model are examined,  and  the  current  status  of
implementation  of prototype systems is considered.  Recent references have
been made to the use of PROLOG as a language for solving problems involving
logic and data storage,  and applications of PROLOG and FACT are  compared.
Finally, the significant features of the FACT System are discussed.


  PROLOG: A Prelude  to  a  New  Generation  of  CAAD  (Computer  Aided
    Architectural Design)
  Swinson, P.S.G.
  Dept. of Architecture, Univ. of Edinburgh, Edinburgh, Scotland
  Comput.  Aided Des.  (GB)    Vol.15,  No.6   335-43   Nov.  1983   
  Coden: CAIDA5
  ISSN: 0010-4485
  York Call: TA 174 658 (Now called "CAD" not "Comput. Aided Des")
  Treatment: General, Review; Practical
  Document Type: Journal paper
  Languages: English
  (38 Refs)
  A  review  of  integrated  CAAD  systems  and  selected  research work is
presented.  The PROLOG FACT dependency system is discussed,  together  with
the facilities it offers architects.

  Logic as the Fifth Generation Computer Language
  Kowalski, R.
  Imperial Coll. of Sci. and Technol., London, England
  Scarrott, G.G. (Editors)
  Fifth Generation Computer Project. State of the Art Report   75-87   1983
  Publ: Pergamon Infotech,    Maidenhead, Berks., England
  York Call: QA 76.I48 ser.11 no.1
  Treatment: General, Review
  Document Type: Book chapter
  Languages: English
  The  use  of  logic  as  a  foundation  for  database  query languages is
described,  as are the extra-logical features of PROLOG,  and  the  use  of
logic as a computer language for children. The relationship between the use
of  logic  for programming and its use for databases is illustrated clearly
with the Horn clause subset of logic. The procedural interpretation of Horn
clauses is identical  to  the  problem  reduction  strategy  in  artificial
intelligence,   and  problem reduction is discussed.  The expressiveness of
Horn clauses can be improved by allowing implications as  conditions.   The
use  of  PROLOG  as  a vehicle for the implementation of expert systems and
functional and relational notation are examined.

Title : Standard LISP for the VAX: A Provisional Implementation
Author : Fogelholm, R.; Frick, I.B.
         Dept. Of Solid State Phys., Royal Inst. Of Technol., 
         Stockholm, SWEDEN
Journal : Sigsam Bull. (USA)   
          Association For Computing Machinery
          Special Interest Group On Symbolic & Algebraic Manipulation
          Vol.16, No.4   10-12 
          NOV. 1982   
Call No. : QA 76.7 A75a (Steacie)
Treatment : Practical
Document Type : Journal Paper
Languages : English
(18 Refs)

  A   provisional   implementation   of   standard   LISP  for  the  VAX-11
large-address-space computer is described.  Until  the  so-called  portable
standard  LISP  has been adapted for the VAX-11,  this standard LISP system
can be used for the running of algebra systems such as  reduce  and  sheep.
Also  reported  is  its  use  in  'logic  programming',  as the basis of an
implementation of PROLOG.




Title :  Logic   Programming  And  A  Dedicated  High-Performance  Personal
         Computer
Author :  Yokoi, T.;  Goto, S.;  Hayashi, H.;  Kunifuji, S.;  Kurokawa, T.;  
          Motoyoshi, F.; Nakashima, H.; Nitta, K.; Sato, T.; Shiraishi, T.; 
          Ueda, K.; Umemura, M.; Umeyama, S.
          Electrotech. Lab., TOKYO, JAPAN;
Journal : Moto-Oka, T. (Editors)
          Fifth Generation Computer Systems. 
          Proceedings Of The International Conference
          159-164 1982
          19-22 OCT. 1981   TOKYO, JAPAN
Call No. : QA 76.5 I649 (Scott)
Publ : North-Holland, AMSTERDAM, NETHERLANDS
ISBN : 0 444 86440 7
Treatment : General, Review
Document Type : Conference Paper
Languages : English
(9 Refs)

  This paper discusses  the  preliminary  research  on  FE-KERNAL  language
(version-0)  and  a  high  performance  personal  computer which are spring 
boards  for   the  research  and  development  of fifth generation computer 
systems.  PROLOG is the starting point.  In this paper,  the rough image of 
FG-KERNEL language (version-0)  and the dedicated computer for the proposed 
language are introduced.




Title : Issues  In  Natural  Language  Access  To  Databases  From  A Logic 
        Programming Perspective
Author : Warren, D.H.D.
         Artificial Intelligence Center, Sri Internat., Menlo Park, CA, USA
Journal : 20th   Annual   Meeting  Of  The  Association  For  Computational 
          Linguistics
          American Journal Of Computation Linguistics
          63-66   1982
          16-18 JUNE 1982   TORONTO, ONT., CANADA
Call No. : P98 A52 (Scott Microtext)
Publ : Assoc. Comput. Linguistics, Menlo Park, CA, USA
Treatment : Practical; Theoretical
Document Type : Conference Paper
Languages : English
(9 Refs)

  Discusses  issues  in  natural  language (NL)  access to databases in the
light of an experimental NL question-answering system,  CHAT,   written  at
Edinburgh  University.   CHAT processes a NL question in three main stages:
Translation planning  execution  English=Logic=PROLOG=Answer  corresponding
roughly to: 'What does the question mean?', 'How shall I answer it?', 'What
is  the  answer?',  the  meaning  of  a  NL  question,  and the database of
information  about  the  application  domain,   are  both  represented   as
statements  in  an  extension  of  a  subset  of first-order logic,  called
'Definite closed world' (DCW) logic.  This logic is a subset of first-order
logic, in that it admits only 'definite' statements;  uncertain information
('either this or that')  is not allowed.   DCW  logic  extends  first-order
logic,   in  that  it  provides constructions to support the 'closed world'
assumption, that everything not known to be true is false.




Title : Grammatical Unification
Author : Maluszynski, J.; Nilsson, J.F.
         Software Systems Res. Center, Linkoping Univ., LINKOPING, SWEDEN
Journal : Inf. Process. Lett. (NETHERLANDS)   
          Vol.15,  No.4   150-158   
          31 OCT.  1982
Call No. : QA 76 I47 (Steacie)
Treatment : Theoretical
Document Type : Journal Paper
Languages : English
(10 Refs)

  Presents a generalization of the concept  of  unification  introduced  by
Robinson (1965) for resolution logic.  Unification is the central procedure
for performing manipulation of symbolic structures  in  resolution  theorem
proving.  The  interest in unification relates, however,  in particular to
Horn clause logic programming and more specifically to PROLOG systems.




Title : Logic Programming On Zmob: A Highly Parallel Machine
Author : Chakravarthy, U.S.; Kasif, S.; Kohli, M.; Minker, J.; Cao, D.
         Dept. Of Computer Sci., Univ. Of Maryland, College Park, MD, USA
Journal : Batcher, K.E.; Meilander, W.C.; Potter, J.L. (Editors)
          Proceedings  Of  The  1982  International  Conference On Parallel 
          Processing
          347-349   1982
          24-27 AUG. 1982   BELLAIRE, MI, USA
Call No : N/A
Sponsor : Ohio State Univ., IEEE
Publ : IEEE, NEW YORK, USA
Treatment : Practical
Document Type : Conference Paper
Languages : English
(8 Refs)

  A framework  for  implementing  a  logic  programming  environment  on  a
distributed  system  is proposed.  Zmob is one such multiple microprocessor
architecture where the individual microprocessors are connected by  a  high
speed  conveyor  belt.   The  paper  describes  how  the  logic programming
environment is created on Zmob.  This makes it possible to exploit the high
level  of  parallelism  possible  in  logic  programming.  The approach and
preliminary design raise several relevant issues  in  distributed  parallel
processing environments; these are currently being investigated.

AUTHOR: COLLIER, P.A.; SAMSON, W.B.  [NOV. 1982]
TITLE:  PROLOG AS A TEACHING TOOL FOR RELATIONAL DATABASE INTERROGATION
        DEPT. OF COMPUTING SCI., UNIV. OF STIRLING, STIRLING, SCOTLAND
        COMPUT. EDUC.  (GB)    NO.42   PP. 26-7  ISSN: 0010-4590

CALL NUMBER: N/A 
TREATMENT: General Review
DOCUMENT TYPE: Journal
LANGUAGES: English

  Relational databases have long been recognised as  an  elegant  model  of
database. practical relational databases tend to fudge issues. However,  by
including all kinds of implementation-dependent features,  particularly  in
the definition of relations, Prolog allows relations to be represented in a
natural  way. Information can be retrieved by a method which is not unlike,
'Query' for example.













AUTHOR: WILSON, W.W.   [SEPT.1982]
TITLE:  BEYOND PROLOG: SOFTWARE SPECIFICATION BY GRAMMAR
        UNIV. OF TEXAS, ARLINGTON, TX, USA
        SIGPLAN NOT. (USA)   VOL.17, NO.9   PP. 34-43

CALL NUMBER: QA76.S53 (STEACIE)
TREATMENT: Practical; Theoretical
DOCUMENT TYPE: Journal
LANGUAGES: English

  In  the programming language Prolog,  one writes software by functionally
specifying it in a form of logic.  This paper proposes a languages  similar
to  Prolog  in  which  software  is  specified  by  a  type of grammar that
generates  hierarchical  expressions.   This  language,   which  is  called
'axiomatic language', was developed with the following objectives: 
1.  very high level - it should be a formalism for  functionally specifying  
    software without specifying an implementation,  
2.  minimal and extensible - it should be a 'minimal'  language, instead of 
    large and complex,   yet  capable  of defining  any computable function 
    in a way that is clear to the human user,
3.  metalanguage - it  should  enable  one  to  define  arbitrary  language
    constructs,   which  can  then  be  used  as tools in the specification 
    of software.









  



AUTHOR: FUTO, I.; SZEREDI,J.   [1982]
TITLE:  A VERY HIGH LEVEL DISCRETE SIMULATION SYSTEM T-PROLOG
        INST. FOR COORDINATION OF COMPUTER TECHNIQUES, BUDAPEST, HUNGARY
        COMPUT. LINGUIST.  AND COMPUT.  LANG.  (HUNGARY)  NO.15  PP. 111-31 

CALL NUMBER: QA76.7 C647  (STEACIE)
TREATMENT: Practical
DOCUMENT TYPE: Journal
LANGUAGES: English
  
  T-Prolog, a very high level simulation language, is presented. it has the
following properties:  
1. the system takes over part of  the problem solving effort from the user;  
2. a built-in backtrack mechanism permits backtracking in time in case of a 
   deadlock; 
3. it changes automatically  and  dynamically  the  simulation model on the 
   basis of logical consequences;  
4. and a more advanced process communication mechanism is presented for the 
   user.  The processes are synchronised by a built-in scheduler.



AUTHOR: MCCORD, M.C.   [MAY 1982]
TITLE:  USING SLOTS AND MODIFIERS IN LOGIC GRAMMARS FOR NATURAL LANGUAGE
        COMPUTER SCI. DEPT., UNIV. OF KENTUCKY, LEXINGTON, KY, USA
        ARTIF. INTELL. (NETHERLANDS)   VOL.18,  NO.3   PP. 327-67

CALL NUMBER: Q335 A785   (STEACIE)
TREATMENT: Practical; Experimental
DOCUMENT TYPE: Journal
LANGUAGES: English
  
  Ideas are presented for the expression of natural  language  grammars  in
clausal logic. Following the work of COLMERAUER,  KOWALSKI,  DAHL,  WARREN,
AND F. PEREIRA,  a uniform format for syntactic structures is proposed.  In
which every syntactic item consists of a central predication,  a cluster of
modifiers,  a list of features,  and a  determiner.   the  modifiers  of  a
syntactic  item  are  again  syntactic  items  (of the same format),  and a
modifier's determiner shows its function in the semantic structure.   Rules
for  semantic  interpretation  are given which include the determination of
scoping of modifiers (with quantifier scoping as a special case).   In  the
rules  for syntax,  the notions of slots and slot-filling play an important
role,  based on previous work by the author.  The ideas have been tested in
an English Database Query System, implemented in Prolog.



AUTHOR: WEBSTER, R.   [29 MARCH 1982]
TITLE:  CHILDREN LEARN THE LOGIC OF COMPUTING
        DATALINK (GB)   PP. 11 

CALL NUMBER: N/A
TREATMENT: General Review
DOCUMENT TYPE: Journal
LANGUAGES: English

  Discusses  a  'LOGIC  AS  A COMPUTER LANGUAGE FOR CHILDREN'  course based
around Prolog.


AUTHOR: MARSHALL, G.J.   [FEB. 1982]
TITLE:  PROGRAMMING LANGUAGES (PROLOG)
        COMPUT. TODAY (GB)   VOL.3, NO.12   PP. 42-4 

CALL NUMBER:
TREATMENT: General Review; Practical
DOCUMENT TYPE: Journal
LANGUAGES: English

  Discusses  Prolog,   a  language originally devised to allow computers to
solve computer theorems from new data. Prolog can be used to good effect in
many other areas:  
1. Automatic Data Base Interrogation,   
2. the  automation  of  deductive  reasoning,  
3. as a language to represent information for natural language processing.



AUTHOR: CLARK, K.; HAMMOND, P.   [26 JAN. 1982]
TITLE:  A GENERAL PURPOSE CLASSIFIER WRITTEN IN PROLOG
        COLLOQUIUM ON 'APPLICATION OF KNOWLEDGE BASED (OR EXPERT) SYSTEMS'
        Publ: IEE,    LONDON, ENGLAND   30 pp.

CALL NUMBER: N/A
TREATMENT: General Review
DOCUMENT TYPE: Conference Paper
LANGUAGES: English
  
  Prolog is a Rule-Based Programming Language based on predicate logic. the
authors  make  use  of  Micro-Prolog  an  implementation  for   Z80   based
microcomputers.   A Prolog program is a set of sentences of symbolic logic.
There are two types of sentence: facts and rules. A Prolog computation is a
deduction from the facts using the rules.  An  example  is  given  and  the
system is described.
  The following topics were dealt with:  
1. Rule-Based methods  for  designing industrial  process  controllers; 
2. Expertise in man and machine; 
3. A general purpose classifier written in Prolog;
4. Expert system techniques in materials engineering;
5. The case for expert systems, the nature of expert systems;
6. Machine induction in mass spectroscopy. 
  7 papers were presented, of which 6 are published in full  in the present 
proceedings, and 1 as an  abstract only. Abstracts of individual papers can 
be found under the relevant classification codes in this or other issues.


AUTHOR: COTTON, J.W.; MARSHALL, S.P.; VARNHAGEN, S.; GALLAGHER, J.P.
        [APR. 1981]
TITLE:  A COMPUTER-ORIENTED TASK ANALYSIS METHOD FOR MATHEMATICS INSTRUCTION
        UNIV. OF CALIFORNIA, SANTA BARBARA, CA, USA
        BEHAV. RES. METHODS AND INSTRUM.  (USA)    VOL.13,  NO.2  PP. 131-40 

CALL NUMBER: N/A
TREATMENT: Practical
DOCUMENT TYPE: Conference Paper
LANGUAGES: English
 
  Components  of  a  computer  solution for fraction problems in arithmetic
have an analog in  a  new  approach  to  educational  task  analysis.   The
components may be called goal-setting or planning elements,  in contrast to
the goal-satisfying or behavioral steps  emphasized  in  much  contemporary
task analysis. A hypothetical tutorial dialogue in which a student is asked
to tell a tutor what step to perform next is presented as an example of the
emphasis  of  the planning side of computation.  Explicit identification of
goal-setting elements of a task is illustrated by analysis of the  task  of
converting a pair of fractions to a new pair with a common denominator. The
decomposition thus produced is simulated with two computer programs: 
(1) a Lisp program using a set of production rules consisting of conditions 
    to be met and subsequent actions to be taken and 
(2) a  Prolog  program  stating  goals and  solving  goals explicitly.













AUTHOR: FERGUSON, R.   [NOV. 1981]
TITLE:  PROLOG. A STEP TOWARD THE ULTIMATE COMPUTER LANGUAGE
        BYTE (USA)   VOL.6, NO.11   PP. 384-99

CALL NUMBER: QA76.5 B98
TREATMENT: General Review; Practical
DOCUMENT TYPE: Journal
LANGUAGES: English
  
  Prolog simplifies the task of informing a computer about obvious (and not
so  obvious)   facts.  The name Prolog is short for 'Programming in Logic';
however,  one does not have to be familiar with formal logic theory to  use
Prolog.  In fact,  the language is so simple a child can learn it.  Yet its
very simplicity  makes  it  far  more  powerful  than  any  other  language
currently  available  for  use  on microcomputers.  Prolog is a programming
language ideally suited to the manipulation of knowledge.



** Call number : unavaliable **

  Test Generation through Logic Programming
  Svanaes, D.; Aas, E.J.
  Univ. of Trondhiem, Trondhiem, Norway
  Integration  VLSI  J.  (Netherlands)    VOL.2,  NO.1   49-67   MARCH 1984
Coden: IVJODL   ISSN: 0167-9260
  U. S. Copyright Clearance Center Code: 0167-9260/84/$3.00
  Treatment: APPLIC; PRACTICAL
  Document Type: JOURNAL PAPER
  Languages: ENGLISH
  (5 Refs)

  Utilization  of  the  Logic  Programming  Language  Prolog   in   solving
CAD/CAM/CAT  problems  is  discussed.   It is demonstrated through examples
that, with Prolog, solutions are obtained through proper problem definition
rather than by algorithmic procedures. The examples offered are in the area
of test generation for digitial circuits.  A very simple formulation of  the
D-algorithm  is  presented,   and  it is demonstrated that levelling of the
circuit is not necessary.  Finally,  the authors  suggest  other  areas  of
CAD/CAM/CAT that may take advantage of Logic Programming.


** Call number : QA 76 N 48 **

  Basic Constructs of the SIM Operating System
  Hattori, T.; Yokoi, T.
  ICOT  RES.  Center,  Inst.  for  New Generation Computer Technol.,  Tokyo,
Japan
   New Generation Comput.  (Japan)    VOL.1,  NO.1    81-5    1983    Coden:
NGCOE5   ISSN: 0288-3635
  Treatment: PRACTICAL
  Document Type: JOURNAL PAPER
  Languages: ENGLISH
  (3 Refs)

  The  basic constructs of SIMPOS (Sequential inference Machine Programming
and Operating System)  are explained.  SIMPOS is an Operating System for  a
super-personal  computer  (SIM),   based  on  Logic Programming Language (a
modified Prolog,  called KL0).  The design  principle  is  simple  both  in
concept  and structure.  The entire system is constructed using these basic
constructs .


** Call number : QA 76 N 48 **
 
  BUP: a Bottom-up parser embedded in Prolog

  Data Abstraction in Prolog/KR
  Nakashima, H.; Suzuki, N.
  Dept. of Math. Engng., Univ. of Tokyo, Tokyo, Japan
   New  Generation  Comput.  (Japan)    VOL.1,  NO.1   49-62   1983   Coden:
NGCOE5   ISSN: 0288-3635
  Treatment: PRACTICAL
  Document Type: JOURNAL PAPER
  Languages: ENGLISH
  (10 Refs)

  Data abstraction and inheritance,  some of the most important features in
constructing  a  large,   clean  Software  system,   in a Logic Programming
language Prolog/KR, an expansion of Prolog, are described.  First two kinds
of  processes  are  added;   one  is  called  NPO,  which is mainly used to
implement a generator,  the other is called CPO  which  is  mainly  used to
implement an abstract data object.  Then synchronization features are added
to implement abstract data types that can be used concurrently.  Using this
feature  it  is possible to employ pipes for communications among processes.
Finally, inheritance mechanism is added to define hierarchies among objects.


** Call number : unavaliable **

  A Logical Approach to Prolog
  Durham, T.
  Computing (GB)   20   5 APRIL 1984   Coden: CPTGB5   ISSN: 0144-3097
  Treatment: GENERAL,REVIEW
  Document Type: JOURNAL PAPER
  Languages: ENGLISH

  Prolog,   in  Theory  a  general  purpose Programming Language,  does not
actually live up  to the ideal of Logic Programming.  The  author  examines
its  shortcomings  and  reviews  the  projects which are looking for ways in
which to counteract these deficiencies.


** Call number : QA 76 N 48 **

  Modularization and Abstraction in Logic Programming
  Furukawa, K.; Nakajima, R.; Yonezawa, A.
  ICOT  RES.  Center,  Inst.  for  New Generation Computer Technol.,  Tokyo,
Japan
   New Generation Comput.  (Japan)    VOL.1,  NO.2   169-77   1983    Coden:
NGCOE5   ISSN: 0288-3635
  Treatment: PRACTICAL
  Document Type: JOURNAL PAPER
  Languages: ENGLISH
  (8 Refs)

  In  knowledge  information  processing,  the structuring of knowledge and
algorithms is one of the key issues.  The goal of this work is to introduce
the   concepts   and   mechanisms   of   abstraction,   modularization  and
parameterization into Logic Programming,  which is one of  the  preliminary
steps  towards  creating  a  Kernel  Language for Fifth Generation computer
systems
 

** Call number : QA 76 N 48 **

  Logic Programming-Past, Present and Future
  Robinson, J.A.
  Logic Programming Res. Center, Syracuse Univ., Syracuse, NY, USA
   New  Generation Comput.  (Japan)    VOL.1,  NO.2   107-24   1983   Coden:
NGCOE5   ISSN: 0288-3635
  Treatment: GENERAL,REVIEW
  Document Type: JOURNAL PAPER
  Languages: ENGLISH

  The author splits the history and future of the idea of Logic Programming
into the following periods: distant past (1879-1970);  near past (1971-80);
present (1981-90); near future (1991-2000); and distant future (2001-?). He
discusses each of these periods.




  Title: "A Parallel Execution Model of Logic Programs" 
  Authors: Umeyama, S.; Tamura, K.,  Electrotech. Lab., Ibaraki, Japan
  Sponsor: IEEE; ACM  10th  Annual International Conference on
                 Computer Architecture Conference Proceedings 
                 349-55   1983  13-16 June 19   Stockholm, Sweden
  Publ: IEEE,    New York, USA   ix+438 pp.  ISBN 0 89791 101 6   
  U. S. copyright clearance center code: ACM 0149-7111/83/0600/0349$01.00
  Treatment: practical
  Document type: conference paper
  Languages: English
  (12 refs)
  York lib. call no.: TK 7885 AI I6  Steacie.

  A logic programming language offers several kinds of parallelism for  its
execution. Among these,  this paper concentrates on or-parallelism which is
an alternative to the backtracking mechanism of a serial interpreter,   and
proposes  an  abstract model of or-parallel interpretation.  It consists of
tokens and five kinds of function units mutually  connected  as  a  process
graph.   The  overall processing is done by the flows of tokens among these
units. The authors also present a mechanism for token labeling, which makes
this process graph reentrant.  A simulation result is  given  to  show  how
efficiently the model works in terms of parallelism.



  Title: "Tao-A Harmonic Mean of Lisp, Prolog and Smalltalk"
  Authors: Takeuchi, I.; Okuno, H.; Ohsato, N.; Musashino Electrical
           Communication  Lab.,  Nippon Telegraph and Telephone  Public
           Corp., Tokyo, Japan
  Publ : Sigplan Not.  (USA)    vol.18,  no.7   65-74   July 1983 
  Treatment: practical
  Document type: journal paper
  Languages: English
  (9 refs)
  York lib. call no.: QA 76 .5 A78a  Steacie.

  Presents  a  new  language,   Tao,   designed  for  an  intelligent total
programming system called NUE (New Unified Environment).  Though Tao  looks
like another newcomer of Lisp dialects at a glance, it takes in features of
Prolog,   Smalltalk  and even Fortran.  Indeed,  Tao unifies procedural and
functional  programming  with  logic  programming   and   object   oriented
programming in the context of Lisp's s-expression. Tao is a 'harmonic' mean
of Lisp, Prolog and Smalltalk in a sense.



  Title: "Specification of Representative Test Cases (Program Testing)"
  Authors: Probert, R.L.; Skuce, D.R.; Ural, H.,  Dept. of Computer Sci.,
           Univ. of Ottawa, Ottawa, Ontario, Canada.
           Berg, H.K.; Howden, W.E.; Panko, R.R.; Spraque, R.H., jr.;
           Shriver,  B.; Walker, T.M.; Cousins, T.R. (editors).
  Sponsor: Univ. Hawaii; Univ. Southwestern Louisiana  Proceedings of the
           Sixteenth Hawaii International  Conference  on  System Sciences
           1983   190-6   1983  5-7 Jan. 1983   Honolulu, Hi, USA
  Publ: Hawaii Int. Conference Syst. Sci., Hi, USA
        2 vol. (x+686 + xii+604) pp.
  Document type: conference paper
  Languages: english
  (19 refs)

  A  simple test-case construction methodology is proposed which appears to
alleviate the tedium and many of the  other  problems  commonly  associated
with  test-case  specification  and  generation.   The methodology involves
constructing an English-like test-case specification, then implementing the
specification as a logic program in Prolog, and finally executing the logic
program to generate test cases.  An example of test-case construction for a
VAX/VMS-like file descriptor is given to illustrate the technique. Features
of  the  approach  include  flexibility,  applicability to common test-case
construction strategies,  an emphasis on representativeness of  test  cases
which  promotes  manual  validation of test specification correctness,  and
applicability throughout the software life cycle. 



  Title: "A Fact Dependency System for the Logic Programmer"
  Authors:  Swinson, P.S.G.;  Pereira, F.C.N.;  Bijl, A., 
            Dept. of Architecture, Univ. of Edinburgh, Edinburgh, Scotland.
  Publ: Comput. Aided Des.  (GB)    vol.15,  no.4   235-43   July 1983 
  U. S. copyright clearance center code: 0010-4485/83/040235-09$03.00
  Treatment: practical
  Document type: journal paper
  Languages: English
  (33 refs)
  York lib. call no.: TA 174 C58  Steacie.

  Describes experimental work in logic programming for architects,  leading
to  the  setting up of a fact dependency system.  The system operates as an
interpreter of the user's instructions,   storing  his  decisions  and  the
conclusions inferred from those decisions.  Consistency from a user's point
of view is automatically maintained.  A separate introduction to the Prolog
logic programming language is appended.



  Title: "Overview to the Fifth Generation Computer System Project"
  Author:  Tohro, M.O.,  Dept. of Electrical Engng.,
           Univ. of Tokyo, Tokyo, Japan
  Sponsor: IEEE; ACM  10th  Annual International Conference on  Computer
                 Architecture Conference Proceedings   417-22   1983  13-16
                 June 1983   Stockholm, Sweden
  Publ: IEEE,    New York, USA  ix+438 pp.   ISBN 0 89791 101 6  
  U. S. copyright clearance center code: acm 0149-7111/83/9417$01.00
  Treatment: general,review
  Document type: conference paper
  Languages: English
  (3 refs)
  York lib. call no.: TK 7885 AI I6  Steacie.

  Computers which have high performances for  non-numeric  data  processing
should  be  developed in order to satisfy and expand new applications which
will become predominant fields in  information  processing  of  the  1990s.
Knowledge   information   processing  forming  the  main  part  of  applied
artificial intelligence is expected to be one of the  important  fields  in
1990s information processing and the dedicated computers for this have been
selected  as the main theme of the national project of the fifth generation
computers.  The key technologies for the fifth generation  computer  system
(FGCS) seem to be VSLI architecture,  parallel processing such as data flow
control,  logic programming,  knowledge base based on relational  database,
and  applied  artificial  intelligence  and  pattern processing.  Inference
machines and relational algebra machines are typical of the core processors
which constitute FGCS.



  Title:  "Inference Machine: From Sequential to Parallel"
  Author:  Uchida, S.,  Inst. for New Generation Computer Technol., 
           Tokyo, Japan
  Sponsor: IEEE; ACM  10th  Annual International Conference on Computer
                 Architecture Conference Proceedings   410-16   1983 
                 13-16   June 1983   Stockholm, Sweden
  Publ: IEEE,    New York, USA   ix+438 pp.   ISBN 0 89791 101 6  
  U. S. copyright clearance center code: ACM 0149-7111/83/0410$01.00
  Treatment: practical
  Document type: conference paper
  Languages: English
  (13 refs)
  York lib. call no.: TK 7885 AI I6  Steacie.

  The research and development plan for computer architecture in the  fifth
generation computer system project (FGCS project) is described, focusing on
the research on the inference machine. In FGCS project, a logic programming
language  has been chosen as its base language and it is named FGKL:  fifth
generation kernel language.  The goal of this project is to  develop  basic
computer  technology  to  build  an  intelligent  computer  system  and its
prototype which will have an inference function,  a knowledge base function
and  an intelligent interface function.  (MOTO-OKA).  A rough sketch of the
overall research plan for computer architecture  in  the  FGCS  project  is
shown in.



  Title: "Parsing With Logical Variables (Logic-based Programming Systems)"
  Authors:  Finin, T.W.;  Stone Palmer, M.,   Dept. of Computer and
            Information Sci., Univ. of Pennsylvania,  Philadelphia, Pa, USA
  Sponsor: Assoc. Comput. Linguistics; Nav. Res. Lab Conference on
           Applied Natural Language Processing. 
           Proceedings  of  the Conference   62-8   1983  1-3 Feb. 1983 
           Santa Monica, Ca, USA
  Publ: American Journal of Computing Linguistics  xi+198 pp.
        Assoc. Comput. Linguistics,  Menlo Park, Ca, USA    
  Treatment: theoretical
  Document type: conference paper
  Languages: English
  (14 refs)
  York lib. call no.: P 98 A52  Scott microtext.

  Logic  based programming systems have enjoyed an increasing popularity in
applied ai work in the  last  few  years.   One  of  the  contributions  to
computational  linguistics  made by the logic programming paradigm has been
the definite clause grammar.   In  comparing  DCGS  with  previous  parsing
mechanisms  such  as ATN's, certain clear advantages are seen.  The authors
feel that the most important of these advantages are  due  to  the  use  of
logical variables with unification as the fundamental operation on them. To
illustrate  the  power  of  the logical variable,  they have implemented an
experimental atn system which treats atn registers as logical variables and
provides a unification operation over them.   They  aim  to  simultaneously
encourage  the  use  of  the  powerful  mechanisms  available  in  DCGS and
demonstrate that some of these techniques can be captured without reference
to a resolution theorem prover.



  Title: "Methodology for Security Analysis of Data-processing Systems"
  Authors:  Carroll, J.M.;  Oi-lun Wu,   Computer Sci. Dept.,
            Univ. of Western Ontario,  London, Ontario, Canada.
  Publ: Comput. and  Secur.  (Netherlands)  vol.2,  no.1  24-34   Jan.  1983
  Treatment: practical
  Document type: journal paper
  Languages: English
  (5 refs)

  Use  of  the  logic  programming  language  Prolog  assists  in  tracking
functional  relationships  through  complex  networks  to  ensure  that all
products receive a security classification consistent  with  the  operative
security  model.  The language also permits computing work factors for data
products.  In some cases,  these work factors  may  modify  the  levels  of
protection required.

Title:         ON DATABASES SYSTEMS DEVELOPMENT THROUGH LOGIC
Author:        DAHL, V.
               BUENOS AIRES UNIV., BUENOS AIRES, ARGENTINA
journal:       ACM  TRANS.   DATABASE SYST.  (USA)    VOL.7,  NO.1   102-23
               MARCH 1982
Call Number:   QA76.903A88a
Treatment:     PRACTICAL
Document Type: JOURNAL PAPER
Languages:     ENGLISH
(34 Refs)

  The use of logic as  a  single  tool  for  formalizing  and  implementing
different aspects of Database Systems in a uniform manner is discussed. The
discussion  focuses on relational Databases with deductive capabilities and
very  high-level  querying  and  defining  features.    The   computational
interpretation of logic is briefly reviewed, and then several pros and cons
concerning the description of data,  programs, queries  and language parser
in terms of logic programs are examined.  The inadequacies  are  discussed,
and it is shown that they can be overcome by the introduction of convenient
extensions into logic programming. Finally,  an experimental database query
system with a natural language  front  end,   implemented  in  Prolog,   is
presented as an illustration of these concepts. A description of the latter
from  the user's point of view and a sample consultation session in Spanish
are included.


Title:          COMPLETELY NONCLAUSAL THEOREM PROVING
Author:         MURRAY, N.V.
                COMPUTER SCI. DEPT., LEMOYNE COLL., SYRACUSE, NY, USA
Journal:        ARTIF. INTELL. (NETHERLANDS)   VOL.18, NO.1   67-85
                JAN.  1982   
Call Number:    Q335.A785
Treatment:      THEORETICAL
Document Type:  JOURNAL PAPER
Languages:      ENGLISH
(11 Refs)

  The proof procedure described operates on quantifier-free formulas of the
Predicate Calculus which are not truth-functionally normalized in any  way.
The  procedure involves a single inference rule called NC-resolution and is
shown  to  be  complete.   Completeness  is  also  obtained  for  a  simple
restriction   on   the   rule's  application.   Examples  are  given  using
NC-resolution to derive a logic program from  its  specification,   and  to
execute a program specification in its original form.


Title:         DERIVATION OF LOGIC PROGRAMS
Author:        HOGGER, C.J.
               UNIV. OF LONDON, LONDON, ENGLAND
Journal:       J.   ASSOC.  COMPUT.  MACH.  (USA)    VOL.28,  NO.2   372-92
               APRIL 1981
Treatment:     THEORETICAL
Document Type: JOURNAL PAPER
Languages:     ENGLISH
(15 Refs)

  Treating  predicate  logic  as  both  a  specification  language  and   a
programming  language,   first-order  logical  deduction  is  shown  to  be
sufficient for verifying, synthesizing  and transforming programs.


Title:         PROLOG CAN LINK DIVERSE SUBJECTS WITH LOGIC AND FUN
Author:        ENNALS, R.
Journal:       PRACT. COMPUT. (GB)   VOL.4, NO.3   91-2   MARCH 1981   
Treatment:     GENERAL,REVIEW
Document Type: JOURNAL PAPER
Languages:     ENGLISH

  Discusses  the use of a version of Prolog adapted for Z-80 microprocessor
using the CP/M operating system. Prolog is a language for teaching logic as
a programming method and is being  used  in  various  database  query  type
applications.


Title:         CONSEQUENCE VERIFICATION OF FLOWCHARTS
Author:        CLARK, K.L.; VAN EMDEN, M.H.
               DEPT.   OF COMPUTING AND CONTROL,  IMPERIAL COLL.  OF SCI.  AND
               TECHNOL., LONDON, ENGLAND
Journal:       IEEE TRANS.  SOFTWARE ENG.  (USA)    VOL.SE-7,  NO.1   52-60   JAN.  1981
Call Number:   QA76.6I17
Treatment:     APPLIC; THEORETICAL
Document Type: JOURNAL PAPER
Languages:     ENGLISH
(18 Refs)

  A  common  basis  is presented for Floyd's method of inductive assertions
and for the subgoal induction method of Morris and Wegbreit.  This basis is
provided  by  consequence  verification,   a  method  for  verifying  logic
programs.  The authors connect flowcharts with logic programs by  giving  a
recursive  definition  of the set of all computations of a flowchart.  This
definition can be given in two ways:  The  recursion  can  run  forward  or
backward. Both definitions can be expressed in logic,  resulting in a logic
program which is then subjected to consequence verification.   Verification
of  the  forward  logic  program is shown to be essentially Floyd's method;
verification of the  backward  program  corresponds  similarly  to  subgoal
induction.


Title:         THE LOGICAL BASIS OF PROGRAMMING BY ASSERTION AND QUERY
Author:        ROBINSON, J.A.
               UNIV. OF SYRACUSE, SYRACUSE, NY, USA
               MICHIE, D. (Editors)
Journal:       EXPERT SYSTEMS IN THE MICRO-ELECTRONIC AGE.  PROCEEDINGS OF THE
               1979 AISB, SUMMER SCHOOL   105-11   1979
               JULY 1979   EDINBURGH, SCOTLAND
Call Number:   QA76.24E88
Publ:          EDINBURGH UNIV. PRESS,    EDINBURGH, SCOTLAND
               VI+287 pp.   ISBN 0 85224 381 2
Treatment:     APPLIC; THEORETICAL
Document Type: CONFERENCE PAPER
Languages:     ENGLISH

  Kowalski has described a style of programming (which he has called 'logic
programming')  in which the program is simply a collection P of assertions,
stored  inside the 'logic machine'.  Thus primed with P as its 'knowledge',
the machine is ready to respond to queries. A query is simply a sentence Q,
written in the same language as is used to write the assertions. Given such
a Q and P,  the machine attempts to deduce Q from P by a series of  logical
steps  called resolutions.  There may be no such series,  in which case the
machine may terminate its attempt to find  one  and  report  that  all  the
possibilities  have  been explored to no avail,  or continue to investigate
what is in fact an infinite variety of possibilities, until the computation
is arbitrarily terminated by the user.


Title:         PLA LOGIC PROGRAMMING
Author:        WILSON, W.
Sponsor:       IEEE
Journal:       PROCEEDINGS  OF  THE  1980  IEEE  INTERNATIONAL SYMPOSIUM ON
               CIRCUITS AND SYSTEMS   897-900   1980
               Part III   28-30 APRIL 1980   HOUSTON, TX, USA
Publ:          IEEE,    NEW YORK, USA
               450 pp.
Treatment:     APPLIC; THEORETICAL
Document Type: CONFERENCE PAPER
Languages:     ENGLISH
(8 Refs)

  The high level language Prolog is applied to the problem of  PLA  design,
specification, and verification. Prolog (programming with logic) is founded
on  a  predicate  logic resolution-based proof procedure restricted to horn
clauses.  It is simple,  easy to use,  interactive,   powerful,   and  well
structured.  A natural and direct method is presented for expressing an PLA
personality as a Prolog program.  The  predicate  logic  semantics  of  the
language  suggests  this  interpretation.   Prolog  also has an operational
semantic interpretation,  which allows the specification to be executed  to
simulate  and  test  the  array  logic.  an interpreter for the language is
currently operational under VM/CMS.


Title:         PROBLEM-SOLVING STRATEGIES
Author:        DAVID, G.
Journal:       COMPUTER AND AUTOMATION INST., ACAD. OF SCI., BUDAPEST, HUNGARY
               TANULMANYOK  MAGY.   TUD.  AKAD.  SZAMITASTECH.  AND AUTOM. 
               KUT.  INTEZ (HUNGARY)   NO.100   155-68   1979
Treatment:     THEORETICAL
Document Type: JOURNAL PAPER
Languages:     ENGLISH
(7 Refs)

  In logic-programming one of the most important  problems  is  to  find  a
suitable searching strategy.  Most of the problem-solving systems are based
on mechanized theorem proving techniques and the search is controlled by  a
program. This program can be treated as 'strategy'. The author aims to give
a  language,   in  which problem solving strategies can be formulated.  The
author presents a short introduction to logic programming to illustrate the
objects of a strategy and after that the main features of a general-purpose
strategy-description language are described.




  Title: Language of Intelligence (Prolog)
  Author: Goodall, A.
  Pub: Systems International   vol.11, no.1   21-4   Jan. 1983   
  Treatment: Applic; general,review
  Document type: Journal paper
  Languages: English
  Prolog  is  a  software  language  designed  for  artificial intelligence
applications such as natural language translation and expert  systems,   as
well  as  relational  databases  and  design support.  Interpreters are now
available for PDP-11, VAX and Z80-based hardware. The development of Prolog
is briefly reviewed.  The process of writing a Prolog program is described.
Applications of Prolog are discussed.

  Title: Revolution in Education
  Author: Ennals, R.
  Pub: Practical Computing    vol.5,  no.12   137-8   Dec.  1982   
  Treatment: General,review
  Document type: Journal paper
  Languages: English
  The author demonstrates the use of microcomputers in teaching history. He
shows how the Russian Revolution can be simulated using the Prolog language.

  Title: Epilog=Prolog+data  flow:   arguments  for  combining  Prolog with
         a data driven mechanism
  Author: Wise, M.J.
  Pub: Univ. of New South Wales, Kensington, New South Wales, Australia
  Sigplan Notice (USA)    vol.17,  no.12   80-6   Dec.  1982
  Call num.: QA 76.5A78a   
  Treatment: Theoretical
  Document type: Journal paper
  Languages: English
  (13 refs)
  Spurred   by   the   desire   to   construct   multi-processor   computer
architectures,  researchers  have  been  proposing  alternatives   to   the
conventional wisdom of the Von Neumann design.  One of the most interesting
and innovative of these is the class of machines based in the principle  of
data-flow-the order in which data-flow operations are executed is dependent
sole  on  the  availability of input data.  The results of experiments with
both real and simulated data-flow computers have, however, been rather less
than earth shattering.  It is the thesis of this work that Prolog  contains
within it the seeds of a solution for the difficulties found in data-flow.

  Title: Design in Logic
  Author: Markusz, Z.
  Pub: Computer  and  Automation Inst. , Hungarian Acad. of Sci., Budapest,
       Hungary, Computer   Aided  Design   vol.14,  no.6  335-43  Nov. 1982   
  Call num.: TA 174.C58
  Treatment: Practical
  Document type: Journal paper
  Languages: English
  (13 refs)
  This paper presents a new technique for the solution of CAD problems. The
technique is  illustrated  on  an  architectural  example.   The  designing
knowledge is represented in the form of axioms described in the language of
mathematical logic.  The calculi of logic which manipulate these axioms can
be used to model designing  processes.   If  Horn  formulas  are  used  the
description of the technical problem can be considered as a program written
in Prolog. A new architectural application of Prolog is introduced,  in the
form of the design  of  a  multistorey  living-house.   The  first  program
generates different versions of ground-plans according to the special needs
of the customer. During the design of the house those versions are selected
which   meet   the   functional   requirements,   the  dimensions  and  the
environmental data of the building.

  Title: Discrete simulation and related fields. Proceedings of the IMACS 
European simulation meeting   135-50   1982 10-12 Sept. 1980   Keszthely, 
Hungary
  Publ: North-Holland,    Amsterdam, Netherlands viii+246 pp.
  Treatment: Theoretical
  Document type: Conference paper
  Languages: English
  (21 refs)
  A  discrete  event  simulation  system based on the  language  Prolog is
presented. The system called t-Prolog extends the traditional possibilities
of simulation languages toward automatic problem solving by using backtrack
in time and automatic model modification depending on  logical  deductions.
As  t-Prolog  is  an  interactive  tool,   the  user has the possibility to
interrupt the simulation run to modify the model or to force it  to  return
to  a  previous  state  for  trying  possible  alternatives.  It admits the
construction  of  goal-oriented  or  goal-seeking  models   with   variable
structure.   Models  are defined in a restricted version of the first order
predicate calculus using Horn clauses.

  Title: Logic as a Computer Language
  Author: Kowaslki, R.
  Pub: Dept. of Computing, Imperial Coll., London, England
  software world    vol.13,  no.4   2-8   1982   
  Treatment: Practical
  Document type: Journal paper
  Languages: English
  Symbolic logic was first designed as a formalization of natural  language
and human reasoning.  As a result of its origins in natural language it has
long been used  in  computing  science  as  a  specification  language  for
computer programs and as a foundation for database query languages.  Recent
developments in automated deduction,  however,  have resulted in  efficient
schemes  for  processing  logic  by computer.  The computer language Prolog
(programming in  logic),   based  on  symbolic  logic,   was  designed  and
implemented  by  Colmerauer  and Roussel in Marseille in 1972.  It has been
used for such varied applications as symbolic integration,  plan formation,
computer aided building design, compiler construction, database description
and  query,  the solution of mechanics problems,  drug analysis and natural
language processing.  The suitability of logic for expressing both programs
and   their   specifications   makes   it  especially  useful  for  program
development.  In this introductory paper the author surveys various aspects
of the use of logic as a computer language.

  Title: W-grammars  and  First-order  Logic   for   the   Definition   and 
         Implementation of Languages
  Author: Simonet, M.
  Pub:Univ. of Grenoble, Grenoble, France, Algol  bull. no.48, 5  Aug. 1982   
  Treatment: Practical
  Document type: Journal paper
  Languages: English
  Summary form only,  as follows:  w-grammars are a powerful tool  for  the
definition   of   languages.   Their  general  form  cannot  reasonably  be
implemented.  Moreover,  their expressive power  gives  rise  to  risks  of
abusive  use.  A proposition is made to restrict them in a way which can be
implemented in first-order logic. after an introduction to w-grammars,  the
author  presents  a  survey  of  the  studies  made  in  this  area.  Three
experiences of implementation in Prolog of languages defined by a w-grammar
are presented.  The first one is a transcription in Prolog of the w-grammar
of ASPLE (a simple programming language) already used for comparing methods
of definition of languages.  The second one is a subset of Algol 68 and the
third one is the grammar of types in a high level language.  A new class of
w-grammars  is  defined:  rw-grammars,  whose metanotions are ramifications
(trees, terms) instead of chains.

  Title: Reactions to micro-Prolog
  Author: Green, T.R.G.
  Pub: Dept. of Psychology, Sheffield Univ., Sheffield, England
  Microprocess. Software q.   no.8   14-17   Aug. 1982
  Treatment: Practical
  Document type: Journal paper
  Languages: English
  This  article  only  describes  reactions  to  micro-Prolog as a possible
teaching language and it is not a critical appraisal of  the  system  as  a
whole.   As  a  cp/m-based  way  into  'expert systems',  micro-Prolog is a
valuable contribution to the repertoire.  The development of Prolog was  an
important  event which has been very fruitful in its area.  The development
of micro-Prolog is another important event-but for novices  and  occasional
users, the event to look forward to is the next, friendly generation.

  Title: Man-machine   Communication   in  Portuguese:  a  friendly library 
         service system
  Author: Coelho, H.
  Pub: Centro de  Informatica,  lab.  Nacional de Engenharia Civil, Lisboa, 
       Portugal
  Information Systems   vol.7,  no.2   163-81   1982   
  Treatment: Practical
  Document type: Journal paper
  Languages: English
  (32 refs)
  This paper enhances some of the main aspects of a system which  converses
in Portuguese to provide a library service covering the field of artificial
intelligence.   Its central feature is the use of logic as a single uniform
language  for  knowledge  and  data  representation  deductive  information
retrieval  and linguistic analysis.  The objective of designing this system
was the development of a feasible method for consulting and  creating  data
bases  in  natural  Portuguese.   The  system  is implemented in Prolog,  a
programming language essentially identical in syntax  and  semantics  to  a
subset of predicate calculus in clausal form.

     Title         :  "Logic Programming And Compiler Writing"
     Author        :  Warren, D.H.D.
                      Department  of  Artificial  Intelligence,  
                      University of Edinburgh,    Edinburgh,  Scotland.
     Journal       :  Software-practice and Experiment  (GB)
                      Vol.10,  No.2,
                      pp. 97-125   Feb  1980.
     Call Number   :
     Coden         :  SPEXBL
     Treatment     :  Practical
     Document Type :  Journal Paper
     Languages     :  English
     (10 Refs)


          The concept of logic programming and its practical application in
     the  programming language Prolog, are explained from first principles.
     The ideas are illustrated by describing in detail one  sizable  Prolog
     program  which  implements  a  simple  compiler.   The  advantages and
     practicability of using Prolog for 'Real' compiler implementation  are
     discussed.


     Title         :  "Applicative  Programming".
     Author        :  Burstall, R.M.
                      Department of Artificial Intelligence, 
                      University of Edinburgh, Edinburgh, Scotland.
     Sponsor       :  IEEE
                      Proceedings  of  the 4th International Conference on
                      Software Engineering
                      p. 110,     Sept  1979,
                      Munich, Germany.
     Publisher     :  IEEE, New York, USA.
                      456 pp.
     Call Number   :
     Treatment     :  Application; Practical
     Document Type :  Conference Paper
     Languages     :  English


          Discusses the advantages and drawbacks of the  applicative  style
     of  programming, also called non-procedural or functional.  This stems
     from  'Pure  Lisp',  although  it  is  independent  of  the  syntactic
     peculiarities  of  Lisp,  and  is  well-exemplified  by  Burge's  book
     'Recursive Programming'.  The idea is to  do  without  assignment  and
     rely  on functions which produce results.  Developments for this style
     include  Prolog  and  the  school  of  logic  programming  (Comerauer,
     Kowalski),  also  the  functional  programming  of Backus which avoids
     variables altogether, rather in the manner of combinatory logic.   The
     author   has  recently  been  experimenting  with  the  design  of  an
     applicative language, 'Hope'.


     Title         :  "Logical Design of Deductive Natural Language 
                       Consultable Data Bases"
     Author        :  Dahl, V.
                      Department of Mathematics,
                      Facultad De Ciencias Exactas Y Naturales,
                      Buenos, Aires, Argentina.
     Sponsor       :  IEEE
                      Proceedings of the Fifth International  Conference
                      on  Very  Large  Data  Bases
                      pp. 24-31,   1979,
                      Rio De Janeiro, Brazil.
     Publisher     :  IEEE,  New York,  USA.
                      450 pp.
     Call Number   :
     Treatment     :  Application;  Practical
     Document Type :  Conference Paper
     Languages     :  English
     (26 Refs)

          Examines data base description problems from the point of view of
     logic  programming,  and  presents an experimental deductive data base
     system  implemented  in  Prolog.   The  author  first  discusses   the
     advantages  of  logic  for describing data bases, in a general manner,
     and then its application to this particular  data  base  system.   The
     incidence  of  natural  language  consultation  capabilities  upon the
     system's characteristics is briefly considered, the concept of a  data
     base is defined.  Next the author delimits which part of a data base's
     description is system-controlled, and which part  is  defined  by  the
     user,  entering  into  the  details  where  the  user's description is
     concerned.  Finally, some examples of a  data  base  consultation  are
     shown that were tested in the system.


     Title         :  "Goal-oriented Derivation of Logic Programs"
     Author        :  Hogger, C.J.
                      Imperial College,
                      London University,  London, England.
                      Winkowski, J.        (Editors)
     Journal       :  Mathematical Foundations of Computer Science 
                      pp. 267-276,   Sept  1978,
                      Zakopane,  Poland.
     Publisher     :  Springer-verlag,  Berlin,  Germany.
                      551 pp.
                      ISBN 3 540 08921 7
     Call Number   :
     Treatment     :  Application; Theoretical
     Document Type :  Conference Paper
     Languages     :  English
     (17 Refs)


     Title         :  "Fatram-a Core Efficient Cut-set Algorithm"
     Author        :  Rasmuson, D.M.;   Marshall, N.H.
                      Egandg Idaho Inc.,
                      Idaho Falls,  ID,  USA.
     Journal       :  IEEE Transaction of Reliability     (USA)
                      Vol.r-27,  No.4,
                      pp. 250-253,   Oct  1978.
     Call Number   :
     Coden         :  IERQAD
     Treatment     :  New Developments; Theoretical
     Document Type :  Journal Paper
     Languages     :  English
     (12 Refs)

          Many algorithms have been developed for determining  minimal  cut
     sets  for  logic  models (in particular, fault trees).  Although these
     methods are theoretically correct, computer  implementation  of  these
     algorithms  proves  them less efficient than is desirable.  This paper
     presents a new method for determining  the  minimal  cut  sets,  which
     makes  more  efficient use of computer memory.  The gates are resolved
     in a deterministic manner according to the following  rules:   1)  and
     gates  and  or  gates  with gate inputs are resolved;  and 2) or gates
     with only basic  event  inputs  are  resolved  last.   Other  computer
     techniques  provide increased efficiency for implementing this method.
     The Fatram algorithm for finding minimal cut sets for fault trees does
     use  computer  core  memory  effectively.   The use of stacks (last-in
     first-out arrays) for the and and or  gates  has  also  increased  the
     efficiency  of  the  program.   The  use  of dynamic storage makes the
     program more flexible.


     Title         :  "Development  of  Fault  Tree for Reliability Studies
                      of a Data-processing System"
     Author        :  Thakur, R.; Misra, K.B.
                      Department of Electrical Engineering.
                      University of Roorkee, 
                      Roorkee,  India.
     Journal       :  International Journal of System Science  (GB)
                      Vol.8,  No.7,
                      pp. 771-780,  July 1977.
     Call Number   :
     Coden         :  IJSYA9
     Treatment     :  Theoretical
     Document Type :  Journal Paper
     Languages     :  English
     (22 Refs)

          A systematic approach is developed for generating the  fault-tree
     logic,  which  is  the basic requirement in any reliability studies of
     large complex systems using Monte Carlo  simulation  or  deterministic
     approaches.   The entire network is decomposed into sub-networks, each
     sub-network involving several loops, and  it  becomes  quite  easy  to
     determine failure logic for these loops and thus for the sub-networks.
     Failure of such sub-networks between the  source  and  the  sink  node
     leads  to  a  major  system  failure  and  therefore  this  successive
     development results in a fault tree  for  the  whole  network.   These
     loops can be automatically generated.  The failure event for each node
     in such an approach can also be accounted for.  The advantage  of  the
     present  methodology  is  that  the  fault-tree logic is automatically
     developed, which can be directly used as a sub-program on  a  computer
     for various reliability studies of the system.


     Title         :  "Horn Clause Computability"
     Author        :  Tarnlund, S.-A.
                      University of Stockholm, 
                      Stockholm, Sweden.
     Journal       :  BIT              (SWEDEN)   
                      Vol.17,   No.2,
                      pp. 215-226,   1977.
     Call number   :  QA 76 B2
     Coden         :  NBITAB
     Treatment     :  Theoretical
     Document Type :  Journal Paper
     Languages     :  English
     (16 Refs)

          It is proved that a turing computable function f is computable in
     binary  Horn  clauses,  which   are  a  subset  of  First-order  logic.
     Moreover, it is proved that the binary Horn clauses do not  need  more
     than  one  function  symbol.  the proofs comprise computable relations
     that can be run efficiently as logic programs on a computer.


     Title         :  "A Simple IC Pulse-pair Stimulator"
     Author        :  Berntson, G.G.;  Ault, R.T.;  Walker, J.M.
                      Laboratory. of Comparative and Physiological Psychology,
                      Ohio State  University,
                      Columbus,  Ohio, USA.
     Journal       :  Behaviour Research Methods and Instrument    (USA)
                      Vol.9, No.1,
                      pp. 18-21,    Feb  1977.
     Call number   :
     Coden         :  BRMIAC
     Treatment     :  Application; Practical
     Document Type :  Journal Paper
     Languages     :  English
     (5 Refs)

          Describes a relatively inexpensive brain  simulator  circuit  for
     generating  trains  of  conditioning  (C) and test (T) pulse pairs for
     refractory period and excitability cycle analyses.  C  and  T  outputs
     are   constant-current   monophasic   cathodal  pulses  of  adjustable
     frequency, duration, amplitude, and delay.  C  and  T  pulses  can  be
     controlled manually or through logic programming and can be fed out of
     the same or separate channels.  The  stimulator  can  be  operated  on
     either  ac  or dc supplies and, when battery operated, features a high
     degree of stimulus isolation.


     Title         :  "The Semantics of Predicate Logic as a Programming 
                       Language"
     Author        :  Van Emden, M.H.;  Kowalski, R.A.
                      University of Edinburgh, 
                      Edinburgh,  Scotland.
     Journal       :  Association Computing Machinary.   (USA)
                      Vol.23,  No.4,
                      pp. 733-742,    Oct  1976.
     Call Number   :  QA 76 A75
     Coden         :  JACOAH
     Treatment     :  Theoretical
     Document Type :  Journal Paper
     Languages     :  English
     (24 Refs)

          Sentences  in  First-order  predicate  logic  can   be   usefully
     interpreted  as  programs.  In this paper the operational and fixpoint
     semantics of predicate logic programs are defined, and the connections
     with  the proof theory and model theory of logic are investigated.  It
     is concluded that operational semantics is a part of proof theory  and
     that   fixpoint  semantics  is  a  special   case of   model-theoretic
     semantics.
